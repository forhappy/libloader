# syntax:
# table <name> { ... }

table onebyte {
# table a-2/1
	0x00: add Eb, Gb
	0x01: add Ev, Gv
	0x02: add Gb, Eb
	0x03: add Gv, Ev
	0x04: add "AL", Ib
	0x05: add "rAX", Iz
	0x06: push "ES" | i64
	0x07: pop "ES" | i64

	0x10: adc Eb, Gb
	0x11: adc Ev, Gv
	0x12: adc Gb, Eb
	0x13: adc Gv, Ev
	0x14: adc "AL", Iz
	0x15: adc "rAX", Iz
	0x16: push "SS" | i64
	0x17: pop "SS" | i64

	0x20: and Eb, Gb
	0x21: and Ev, Gv
	0x22: and Gb, Eb
	0x23: and Gv, Ev
	0x24: and "AL", Iz
	0x25: and "rAX", Iz
	0x26: PREFIX2
	0x27: daa | i64

	0x30: xor Eb, Gb
	0x31: xor Ev, Gv
	0x32: xor Gb, Eb
	0x33: xor Gv, Ev
	0x34: xor "AL", Iz
	0x35: xor "rAX", Iz
	0x36: PREFIX2
	0x37: aaa | i64

# such group have "o64" automatically
	X64 {
		0x40-0x47: REX
	}
	
# such group have "i64" automatically
	X32 {
		0x40: inc "eAX"
		0x41: inc "eCX"
		0x42: inc "eDX"
		0x43: inc "eBX"
		0x44: inc "eSP"
		0x45: inc "eBP"
		0x46: inc "eSI"
		0x47: inc "eDI"
	}

	0x50: push "rAX/r8" | d64
	0x51: push "rCX/r9" | d64
	0x52: push "rDX/r10" | d64
	0x53: push "rBX/r11" | d64
	0x54: push "rSP/r12" | d64
	0x55: push "rBP/r13" | d64
	0x56: push "rSI/r14" | d64
	0x57: push "rDI/r15" | d64
	
	0x60: pusha | i64
	0x61: popa | i64
	0x62: bound Gv, Ma | i64

	0x63: movsxd Gv, Ev | o64
	0x63: arpl Ew, Gw | i64

	0x64: PREFIX2
	0x65: PREFIX2
	0x66: PREFIX3
	# XXX address size impact the meaning of modrm
	0x67: PREFIX4
	
	0x70: jo Jb | f64 !
	0x71: jno Jb | f64 !
	0x72: jb Jb | f64 !
	0x73: jae Jb | f64 !
	0x74: je Jb | f64 !
	0x75: jne Jb | f64 !
	0x76: jbe Jb | f64 !
	0x77: ja Jb | f64 !

	0x80: GRP1 Eb, Ib
	0x81: GRP1 Ev, Iz
	0x82: GRP1 Eb, Ib | i64
	0x83: GRP1 Ev, Ib



	0x84: test Eb, Gb
	0x85: test Ev, Gv
	0x86: xchg Eb, Gb
	0x87: xchg Ev, Gv

	0x90: nop
	0x91: xchg "rAX", "rCX/r9"
	0x92: xchg "rAX", "rDX/r10"
	0x93: xchg "rAX", "rBX/r11"
	0x94: xchg "rAX", "rSP/r12"
	0x95: xchg "rAX", "rBP/r13"
	0x96: xchg "rAX", "rSI/r14"
	0x97: xchg "rAX", "rDI/r15"

	0xa0: mov "AL", Ob
	0xa1: mov "rAX", Ov
	0xa2: mov Ob, "AL"
	0xa3: mov Ov, "rAX"
	0xa4: movs Xb, Yb
	0xa5: movs Xv, Yv
	0xa6: cmps Xb, Yb
	0xa7: cmps Xv, Yv

	0xb0: mov "AL/R8L", Ib
	0xb1: mov "CL/R9L", Ib
	0xb2: mov "DL/R10L", Ib
	0xb3: mov "BL/R11L", Ib
	0xb4: mov "AH/R12L", Ib
	0xb5: mov "CH/R13L", Ib
	0xb6: mov "DH/R14L", Ib
	0xb7: mov "BH/R15L", Ib

	0xc0: GRP2 Eb, Ib | 1A
	0xc1: GRP2 Ev, Ib | 1A
	0xc2: retn Iw | f64 !
	0xc3: retn | f64 !
	0xc4: les Gz, Mp | i64
	0xc5: lds Gz, Mp | i64
	0xc6: GRP11 Eb, Ib | 1A
	0xc7: GRP11 Ev, Iz | 1A

	0xd0: GRP2 Eb, '1' | 1A
	0xd1: GRP2 Ev, '1' | 1A
	0xd2: GRP2 Eb, "CL" | 1A
	0xd3: GRP2 Ev, "CL" | 1A
	0xd4: amm Ib | i64
	0xd5: aad Ib | i64
	0xd6: BAD
	0xd7: xlat

	0xe0: loopne Jb | f64 !
	0xe1: loope Jb | f64 !
	0xe2: loop Jb | f64 !
	0xe3: jecxz Jb | f64 !
	0xe4: in "AL", Ib
	0xe5: in "eAX", Ib
	0xe6: out Ib, "AL"
	0xe7: out Ib, "eAX"

	0xf0: PREFIX1
	0xf1: BAD
	0xf2: PREFIX1
	0xf3: PREFIX1
	0xf4: hlt
	0xf5: cmc
	0xf6: GRP3 Eb | 1A
	0xf7: GRP3 Ev | 1A


# table a-2/2

	0x08: or Eb, Gb
	0x09: or Ev, Gv
	0x0a: or Gb, Eb
	0x0b: or Gv, Ev
	0x0c: or "AL", Ib
	0x0d: or "rAX", Iz
	0x0e: pushcs | i64
	0x0f: ESCAPE

	0x18: sbb Eb, Gb
	0x19: sbb Ev, Gv
	0x1a: sbb Gb, Eb
	0x1b: sbb Gv, Ev
	0x1c: sbb "AL", Ib
	0x1d: sbb "rAX", Iz
	0x1e: pushds | i64
	0x1f: popds

	0x28: sub Eb, Gb
	0x29: sub Ev, Gv
	0x2a: sub Gb, Eb
	0x2b: sub Gv, Ev
	0x2c: sub "AL", Ib
	0x2d: sub "rAX", Iz
	0x2e: PREFIX2
	0x2f: das | i64

	0x38: cmp Eb, Gb
	0x39: cmp Ev, Gv
	0x3a: cmp Gb, Eb
	0x3b: cmp Gv, Ev
	0x3c: cmp "AL", Ib
	0x3d: cmp "rAX", Iz
	0x3e: PREFIX2
	0x3f: aas | i64



	X64 {
		0x48-0x4f: REX
	}

	X32 {
		0x48: dec "eAX"
		0x49: dec "eCX"
		0x4a: dec "eDX"
		0x4b: dec "eBX"
		0x4c: dec "eSP"
		0x4d: dec "eBP"
		0x4e: dec "eSI"
		0x4f: dec "eDI"
	}

	0x58: pop "rAX/r8" | d64
	0x59: pop "rCX/r9" | d64
	0x5a: pop "rDX/r10" | d64
	0x5b: pop "rBX/r11" | d64
	0x5c: pop "rSP/r12" | d64
	0x5d: pop "rBP/r13" | d64
	0x5e: pop "rSI/r14" | d64
	0x5f: pop "rDI/r15" | d64

	0x68: push Iz | d64
	0x69: imul Gv, Ev, Iz
	0x6a: push Ib
	0x6b: imul Gv, Ev, Ib
	0x6c: insb Yb, "DX"
	0x6d: ins Yz, "DX"
	0x6e: outs "DX", Xb
	0x6f: outs "DX", Xz

	0x78: js Jb | f64 !
	0x79: jns Jb | f64 !
	0x7a: jp Jb | f64 !
	0x7b: jnp Jb | f64 !
	0x7c: jl Jb | f64 !
	0x7d: jge Jb | f64 !
	0x7e: jle Jb | f64 !
	0x7f: jg Jb | f64 !

	0x88: mov Eb, Gb
	0x89: mov Ev, Gv
	0x8a: mov Gb, Eb
	0x8b: mov Gv, Ev
	0x8c: mov Ev, Sw
	0x8d: lea Gv, Mxx
	0x8e: mov Sw, Ew
	0x8f: GRP1A

	0x98: cwtl
	0x99: cltd
	0x9a: callf Ap | i64 !
	0x9b: fwait
	0x9c: pushf Fv
	0x9d: popf Fv
	0x9e: sahf
	0x9f: lahf

	0xa8: test "AL", Ib
	0xa9: test "rAX", Iz
	0xaa: stosb Yb, "AL"
	0xab: stos Yv, "rAX"
	0xac: lodsb "AL", Xb
	0xad: lods "rAX", Xv
	0xae: scasb "AL", Yb
	0xaf: scas "rAX", Xv

	0xb8: mov "rAX/r8", Iv
	0xb9: mov "rCX/r9", Iv
	0xba: mov "rDX/r10", Iv
	0xbb: mov "rBX/r11", Iv
	0xbc: mov "rSP/r12", Iv
	0xbd: mov "rBP/r13", Iv
	0xbe: mov "rSI/r14", Iv
	0xbf: mov "rDI/r15", Iv

	0xc8: enter Iw, Ib
	0xc9: leave | d64
	0xca: retf Iw | !
	0xcb: retf | !
	0xcc: int3 | !
	0xcd: int | !
	0xce: into | !
	0xcf: iret

	0xd8-0xdf: ESCAPE

	0xe8: call Jz | !
	0xe9: jmp Jz | f64 !
	0xea: ljmp Ap | i64 !
	0xeb: jmp Jb | f64 !
	0xec: in "AL", "DX"
	0xed: in "eAX", "DX"
	0xee: out "DX", "AL"
	0xef: out "DX", "eAX"

	0xf8: clc
	0xf9: stc
	0xfa: cli
	0xfb: sti
	0xfc: cld
	0xfd: std
	0xfe: GRP4 | 1A
	0xff: GRP5 | 1A
}

table group1 {
	0x00: add
	0x01: or
	0x02: adc
	0x03: sbb
	0x04: and
	0x05: sub
	0x06: xor
	0x07: cmp
}

table group2 {
	0x00: rol
	0x01: ror
	0x02: rcl
	0x03: rcr
	0x04: shl
	0x05: shr
	0x07: sar
}

table group11 {
	0x00: mov
}

table group3_0xf6 {
	0x00: test Ib
	0x02: not
	0x03: neg
	0x04: mul "AL"
	0x05: imul "AL"
	0x06: div "AL"
	0x07: idiv "AL"
}

table group3_0xf7 {
	0x00: test Iz
	0x02: not
	0x03: neg
	0x04: mul "rAX"
	0x05: imul "rAX"
	0x06: div "rAX"
	0x07: idiv "rAX"
}

table group4 {
	0x00: inc Eb
	0x01: dec Eb
}

table group5 {
	0x00: inc Ev
	0x01: dec Ev
	0x02: calln Ev | f64 !
	0x03: callf Ep | !
	0x04: jmpn Ev | !
	0x05: jmpf Ep | !
	0x06: push Ev | d64
}

# vim:ts=4:sw=4

