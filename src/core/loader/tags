!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABORT	malloc.c	563;"	d	file:
ABORT_ON_ASSERT_FAILURE	malloc.c	566;"	d	file:
ACQUIRE_LOCK	malloc.c	1657;"	d	file:
ACQUIRE_LOCK	malloc.c	1757;"	d	file:
ACQUIRE_LOCK	malloc.c	1822;"	d	file:
ACQUIRE_LOCK	malloc.c	1853;"	d	file:
ACQUIRE_MALLOC_GLOBAL_LOCK	malloc.c	1904;"	d	file:
ACQUIRE_MALLOC_GLOBAL_LOCK	malloc.c	1910;"	d	file:
ARCH_CHECKPOINT_H	arch_checkpoint.h	9;"	d
ARCH_CKPT_SECT_FXREGS_MARK	arch_checkpoint.h	/^	ARCH_CKPT_SECT_FXREGS_MARK = 0xfffe,$/;"	e	enum:arch_ckpt_mark
ARCH_CKPT_SECT_UREGS_MARK	arch_checkpoint.h	/^	ARCH_CKPT_SECT_UREGS_MARK = 0xffff,$/;"	e	enum:arch_ckpt_mark
ASM_BASE	logger.c	18;"	d	file:
ATTR	debug.c	/^void ATTR(noreturn)$/;"	f
ATTR	syscall.c	/^ATTR(noreturn) void$/;"	f
AT_BASE	interp_main.c	49;"	d	file:
AT_BASE_PLATFORM	interp_main.c	79;"	d	file:
AT_CLKTCK	interp_main.c	57;"	d	file:
AT_DCACHEBSIZE	interp_main.c	69;"	d	file:
AT_EGID	interp_main.c	56;"	d	file:
AT_ENTRY	interp_main.c	51;"	d	file:
AT_EUID	interp_main.c	54;"	d	file:
AT_EXECFD	interp_main.c	44;"	d	file:
AT_EXECFN	interp_main.c	83;"	d	file:
AT_FLAGS	interp_main.c	50;"	d	file:
AT_FPUCW	interp_main.c	66;"	d	file:
AT_GID	interp_main.c	55;"	d	file:
AT_HWCAP	interp_main.c	61;"	d	file:
AT_ICACHEBSIZE	interp_main.c	70;"	d	file:
AT_IGNORE	interp_main.c	43;"	d	file:
AT_IGNOREPPC	interp_main.c	75;"	d	file:
AT_NOTELF	interp_main.c	52;"	d	file:
AT_NULL	interp_main.c	42;"	d	file:
AT_PAGESZ	interp_main.c	48;"	d	file:
AT_PHDR	interp_main.c	45;"	d	file:
AT_PHENT	interp_main.c	46;"	d	file:
AT_PHNUM	interp_main.c	47;"	d	file:
AT_PLATFORM	interp_main.c	60;"	d	file:
AT_RANDOM	interp_main.c	81;"	d	file:
AT_SECURE	interp_main.c	77;"	d	file:
AT_SYSINFO	interp_main.c	87;"	d	file:
AT_SYSINFO_EHDR	interp_main.c	88;"	d	file:
AT_UCACHEBSIZE	interp_main.c	71;"	d	file:
AT_UID	interp_main.c	53;"	d	file:
BIGBUFFER_EXTRA_PAGES	bigbuffer.h	21;"	d
BIGBUFFER_EXTRA_SZ	bigbuffer.h	20;"	d
BIGBUFFER_PAGES	bigbuffer.h	19;"	d
BUILD_MODRM	processor.h	88;"	d
BitScanForward	malloc.c	1377;"	d	file:
BitScanReverse	malloc.c	1378;"	d	file:
CALL_DIRECT_MMAP	malloc.c	1576;"	d	file:
CALL_DIRECT_MMAP	malloc.c	1578;"	d	file:
CALL_DIRECT_MMAP	malloc.c	1586;"	d	file:
CALL_MMAP	malloc.c	1566;"	d	file:
CALL_MMAP	malloc.c	1568;"	d	file:
CALL_MMAP	malloc.c	1587;"	d	file:
CALL_MORECORE	malloc.c	1551;"	d	file:
CALL_MORECORE	malloc.c	1553;"	d	file:
CALL_MORECORE	malloc.c	1556;"	d	file:
CALL_MREMAP	malloc.c	1596;"	d	file:
CALL_MREMAP	malloc.c	1598;"	d	file:
CALL_MREMAP	malloc.c	1601;"	d	file:
CALL_MUNMAP	malloc.c	1571;"	d	file:
CALL_MUNMAP	malloc.c	1573;"	d	file:
CALL_MUNMAP	malloc.c	1588;"	d	file:
CHUNK_ALIGN_MASK	malloc.c	1451;"	d	file:
CHUNK_OVERHEAD	malloc.c	2071;"	d	file:
CHUNK_OVERHEAD	malloc.c	2073;"	d	file:
CINUSE_BIT	malloc.c	2115;"	d	file:
CKPT_SECT_ARGS_MARK	checkpoint.h	/^	CKPT_SECT_ARGS_MARK,$/;"	e	enum:ckpt_mark
CKPT_SECT_CPU_MARK	checkpoint.h	/^	CKPT_SECT_CPU_MARK,$/;"	e	enum:ckpt_mark
CKPT_SECT_END_MARK	checkpoint.h	/^	CKPT_SECT_END_MARK	= 0,$/;"	e	enum:ckpt_mark
CKPT_SECT_ENVS_MARK	checkpoint.h	/^	CKPT_SECT_ENVS_MARK,$/;"	e	enum:ckpt_mark
CKPT_SECT_EXEC_MARK	checkpoint.h	/^	CKPT_SECT_EXEC_MARK,$/;"	e	enum:ckpt_mark
CKPT_SECT_MEMSEG_MARK	checkpoint.h	/^	CKPT_SECT_MEMSEG_MARK,$/;"	e	enum:ckpt_mark
CKPT_SECT_TLS_MARK	checkpoint.h	/^	CKPT_SECT_TLS_MARK,$/;"	e	enum:ckpt_mark
CKPT_SUBSECT_FDATA_MARK	checkpoint.h	/^	CKPT_SUBSECT_FDATA_MARK,$/;"	e	enum:ckpt_mark
CKPT_SUBSECT_FINFO_MARK	checkpoint.h	/^	CKPT_SUBSECT_FINFO_MARK,$/;"	e	enum:ckpt_mark
CKPT_SUBSECT_FN_MARK	checkpoint.h	/^	CKPT_SUBSECT_FN_MARK,$/;"	e	enum:ckpt_mark
CKPT_VERSION_STRING	checkpoint.h	30;"	d
CMFAIL	malloc.c	1472;"	d	file:
COMP_FILE_HEADER	compression.h	14;"	d
COMP_FILE_HEADER_SZ	compression.h	15;"	d
COMP_LZO_COMP	compression.h	/^	COMP_LZO_COMP = 2,$/;"	e	enum:comp_block_type
COMP_NOCOMP	compression.h	/^	COMP_NOCOMP = 1,$/;"	e	enum:comp_block_type
CONF_VAL	env_conf.h	25;"	d
CORRUPTION_ERROR_ACTION	malloc.c	2627;"	d	file:
CORRUPTION_ERROR_ACTION	malloc.c	2633;"	d	file:
CURRENT_THREAD	malloc.c	1655;"	d	file:
CURRENT_THREAD	malloc.c	1755;"	d	file:
CURRENT_THREAD	malloc.c	1820;"	d	file:
CURRENT_THREAD	malloc.c	1851;"	d	file:
DEBUG	malloc.c	1306;"	d	file:
DEBUG_BUFFER_SZ	debug.c	14;"	d	file:
DEFAULT_GRANULARITY	malloc.c	617;"	d	file:
DEFAULT_GRANULARITY	malloc.c	619;"	d	file:
DEFAULT_MMAP_THRESHOLD	malloc.c	631;"	d	file:
DEFAULT_MMAP_THRESHOLD	malloc.c	633;"	d	file:
DEFAULT_TRIM_THRESHOLD	malloc.c	624;"	d	file:
DEFAULT_TRIM_THRESHOLD	malloc.c	626;"	d	file:
DEFINED_PUSHA_REGS	processor.h	11;"	d
DEFINE_UNLOCKED_XMUTEX	mutex.h	18;"	d
DIRECT_MMAP	malloc.c	1585;"	d	file:
DIRECT_MMAP_DEFAULT	malloc.c	1498;"	d	file:
DIRECT_MMAP_DEFAULT	malloc.c	1535;"	d	file:
DLMALLOC_VERSION	malloc.c	485;"	d	file:
EF_SPARCV9_MM	elf.h	106;"	d
EF_SPARCV9_PSO	elf.h	108;"	d
EF_SPARCV9_RMO	elf.h	109;"	d
EF_SPARCV9_TSO	elf.h	107;"	d
EF_SPARC_32PLUS	elf.h	112;"	d
EF_SPARC_EXT_MASK	elf.h	111;"	d
EF_SPARC_HAL_R1	elf.h	114;"	d
EF_SPARC_LEDATA	elf.h	110;"	d
EF_SPARC_SUN_US1	elf.h	113;"	d
EF_SPARC_SUN_US3	elf.h	115;"	d
ELF_CORE_EFLAGS	snitchaser_main.c	110;"	d	file:
ELF_EXEC_PAGESIZE	snitchaser_main.c	101;"	d	file:
ELF_MIN_ALIGN	snitchaser_main.c	104;"	d	file:
ELF_MIN_ALIGN	snitchaser_main.c	106;"	d	file:
ELF_PAGEALIGN	snitchaser_main.c	114;"	d	file:
ELF_PAGEOFFSET	snitchaser_main.c	113;"	d	file:
ELF_PAGESTART	snitchaser_main.c	112;"	d	file:
ENTER_ENTRY	asm_helper.S.h	11;"	d
ET_CORE	snitchaser_main.c	120;"	d	file:
ET_DYN	snitchaser_main.c	119;"	d	file:
ET_EXEC	snitchaser_main.c	118;"	d	file:
ET_NONE	snitchaser_main.c	116;"	d	file:
ET_NUM	snitchaser_main.c	121;"	d	file:
ET_REL	snitchaser_main.c	117;"	d	file:
EXIT_TO	asm_helper.S.h	27;"	d
EXTERN_BIT	malloc.c	1608;"	d	file:
Elf32_auxv_t	interp_main.c	/^} Elf32_auxv_t;$/;"	t	typeref:struct:__anon1	file:
Elf_Half	elf.h	24;"	d
Elf_Half	elf.h	34;"	d
FENCEPOST_HEAD	malloc.c	2121;"	d	file:
FLAG4_BIT	malloc.c	2116;"	d	file:
FLAG_BITS	malloc.c	2118;"	d	file:
FOOTERS	malloc.c	560;"	d	file:
FORCEINLINE	malloc.c	725;"	d	file:
FORCEINLINE	malloc.c	727;"	d	file:
FORCEINLINE	malloc.c	743;"	d	file:
FORCEINLINE	malloc.c	747;"	d	file:
FOUR_SIZE_T_SIZES	malloc.c	1446;"	d	file:
GDBSERVER_NOTIFICATION	signal.h	11;"	d
HALF_MAX_SIZE_T	malloc.c	1448;"	d	file:
HAVE_MMAP	malloc.c	500;"	d	file:
HAVE_MMAP	malloc.c	523;"	d	file:
HAVE_MMAP	malloc.c	585;"	d	file:
HAVE_MORECORE	malloc.c	501;"	d	file:
HAVE_MORECORE	malloc.c	522;"	d	file:
HAVE_MORECORE	malloc.c	602;"	d	file:
HAVE_MORECORE	malloc.c	604;"	d	file:
HAVE_MREMAP	malloc.c	592;"	d	file:
HAVE_MREMAP	malloc.c	594;"	d	file:
INCLUDE_ELF_H	elf.h	8;"	d
INITIAL_LOCK	malloc.c	1656;"	d	file:
INITIAL_LOCK	malloc.c	1756;"	d	file:
INITIAL_LOCK	malloc.c	1821;"	d	file:
INITIAL_LOCK	malloc.c	1852;"	d	file:
INITIAL_LOCK	malloc.c	1899;"	d	file:
INSECURE	malloc.c	582;"	d	file:
INTERP_MARKS_H	marks.h	8;"	d
INTERP_RET_SNITCHASER	interp_main.c	26;"	d	file:
INTERP_RET_UNSELECTED	interp_main.c	25;"	d	file:
INTERP_SYSCALL_NR	syscall_tpd.h	7;"	d
INTERP_USER_ENTRY_H	user_entry.h	7;"	d
INTERP_XASM_SIGNAL_H	signal.h	7;"	d
INUSE_BITS	malloc.c	2117;"	d	file:
LACKS_ERRNO_H	malloc.c	508;"	d	file:
LACKS_FCNTL_H	malloc.c	493;"	d	file:
LACKS_STRINGS_H	malloc.c	506;"	d	file:
LACKS_STRING_H	malloc.c	505;"	d	file:
LACKS_SYS_MMAN_H	malloc.c	504;"	d	file:
LACKS_SYS_PARAM_H	malloc.c	503;"	d	file:
LACKS_SYS_TYPES_H	malloc.c	507;"	d	file:
LACKS_UNISTD_H	malloc.c	502;"	d	file:
LOADER_ENV_CONF_H	env_conf.h	8;"	d
LOADER_FDBNPRINTF_H	fdbnprintf.h	7;"	d
LOADER_INIT_STACK_H	startup_stack.h	7;"	d
LOADER_MM_H	mm.h	7;"	d
LOGGER_DIRECTORY	snitchaser_main.c	227;"	d	file:
MALLINFO_FIELD_TYPE	malloc.c	653;"	d	file:
MALLOC_ALIGNMENT	malloc.c	526;"	d	file:
MALLOC_ALIGNMENT	malloc.c	557;"	d	file:
MALLOC_FAILURE_ACTION	malloc.c	510;"	d	file:
MALLOC_FAILURE_ACTION	malloc.c	598;"	d	file:
MAP_ANONYMOUS	malloc.c	1480;"	d	file:
MAP_ANONYMOUS	proc.c	26;"	d	file:
MAP_ANONYMOUS	snitchaser_main.c	136;"	d	file:
MAP_EXECUTABLE	proc.c	21;"	d	file:
MAP_EXECUTABLE	snitchaser_main.c	131;"	d	file:
MAP_FIXED	proc.c	25;"	d	file:
MAP_FIXED	snitchaser_main.c	135;"	d	file:
MAP_PRIVATE	proc.c	23;"	d	file:
MAP_PRIVATE	snitchaser_main.c	133;"	d	file:
MAP_SHARED	proc.c	22;"	d	file:
MAP_SHARED	snitchaser_main.c	132;"	d	file:
MAP_TYPE	proc.c	24;"	d	file:
MAP_TYPE	snitchaser_main.c	134;"	d	file:
MAX_AVAL_OBJ_SIZE	mm.h	32;"	d
MAX_COMP_SZ	compression.h	12;"	d
MAX_OUTPUT_FN_LEN	checkpoint.h	12;"	d
MAX_PROC_MAPS_FILE_SIZE	proc.c	27;"	d	file:
MAX_RELEASE_CHECK_RATE	malloc.c	638;"	d	file:
MAX_RELEASE_CHECK_RATE	malloc.c	640;"	d	file:
MAX_REQUEST	malloc.c	2092;"	d	file:
MAX_SIZE_T	malloc.c	542;"	d	file:
MAX_SMALL_REQUEST	malloc.c	2439;"	d	file:
MAX_SMALL_SIZE	malloc.c	2438;"	d	file:
MAX_THREADS	tls.c	28;"	d	file:
MCHUNK_SIZE	malloc.c	2068;"	d	file:
MFAIL	malloc.c	1471;"	d	file:
MIN_CHUNK_SIZE	malloc.c	2082;"	d	file:
MIN_LARGE_SIZE	malloc.c	2437;"	d	file:
MIN_REQUEST	malloc.c	2093;"	d	file:
MIN_SMALL_INDEX	malloc.c	2680;"	d	file:
MLOCK_T	malloc.c	1654;"	d	file:
MLOCK_T	malloc.c	1754;"	d	file:
MLOCK_T	malloc.c	1819;"	d	file:
MLOCK_T	malloc.c	1850;"	d	file:
MMAP	malloc.c	1583;"	d	file:
MMAP_CHUNK_OVERHEAD	malloc.c	2077;"	d	file:
MMAP_CLEARS	malloc.c	513;"	d	file:
MMAP_CLEARS	malloc.c	515;"	d	file:
MMAP_CLEARS	malloc.c	588;"	d	file:
MMAP_DEFAULT	malloc.c	1484;"	d	file:
MMAP_DEFAULT	malloc.c	1492;"	d	file:
MMAP_DEFAULT	malloc.c	1533;"	d	file:
MMAP_FLAGS	malloc.c	1483;"	d	file:
MMAP_FLAGS	malloc.c	1490;"	d	file:
MMAP_FOOT_PAD	malloc.c	2079;"	d	file:
MMAP_PROT	malloc.c	1478;"	d	file:
MODRM_MOD	processor.h	85;"	d
MODRM_REG	processor.h	86;"	d
MODRM_RM	processor.h	87;"	d
MORECORE_CONTIGUOUS	malloc.c	608;"	d	file:
MORECORE_CONTIGUOUS	malloc.c	612;"	d	file:
MORECORE_DEFAULT	malloc.c	610;"	d	file:
MREMAP_DEFAULT	malloc.c	1541;"	d	file:
MSPACES	malloc.c	551;"	d	file:
MSPACES	malloc.c	553;"	d	file:
MUNMAP	malloc.c	1584;"	d	file:
MUNMAP_DEFAULT	malloc.c	1477;"	d	file:
MUNMAP_DEFAULT	malloc.c	1534;"	d	file:
M_GRANULARITY	malloc.c	667;"	d	file:
M_MMAP_THRESHOLD	malloc.c	668;"	d	file:
M_TRIM_THRESHOLD	malloc.c	666;"	d	file:
NEED_GLOBAL_LOCK_INIT	malloc.c	1856;"	d	file:
NOINLINE	malloc.c	732;"	d	file:
NOINLINE	malloc.c	734;"	d	file:
NOINLINE	malloc.c	736;"	d	file:
NO_MALLINFO	malloc.c	650;"	d	file:
NO_SEGMENT_TRAVERSAL	malloc.c	656;"	d	file:
NO_SIGNAL_MARK	marks.h	12;"	d
NR_CKPT_SECT_MARKS	checkpoint.h	/^	NR_CKPT_SECT_MARKS,$/;"	e	enum:ckpt_mark
NR_TLS_PAGES	tls.h	16;"	d
NSMALLBINS	malloc.c	2432;"	d	file:
NTREEBINS	malloc.c	2433;"	d	file:
OBJ_BUCKET_SIZE	mm.h	21;"	d
ONLY_MSPACES	malloc.c	545;"	d	file:
ONLY_MSPACES	malloc.c	547;"	d	file:
O_ACCMODE	proc.c	8;"	d	file:
O_ACCMODE	snitchaser_main.c	73;"	d	file:
O_APPEND	snitchaser_main.c	81;"	d	file:
O_ASYNC	snitchaser_main.c	86;"	d	file:
O_CREAT	snitchaser_main.c	77;"	d	file:
O_EXCL	snitchaser_main.c	78;"	d	file:
O_FSYNC	snitchaser_main.c	85;"	d	file:
O_NDELAY	snitchaser_main.c	83;"	d	file:
O_NOCTTY	snitchaser_main.c	79;"	d	file:
O_NONBLOCK	snitchaser_main.c	82;"	d	file:
O_RDONLY	proc.c	9;"	d	file:
O_RDONLY	snitchaser_main.c	74;"	d	file:
O_RDWR	proc.c	11;"	d	file:
O_RDWR	snitchaser_main.c	76;"	d	file:
O_SYNC	snitchaser_main.c	84;"	d	file:
O_TRUNC	snitchaser_main.c	80;"	d	file:
O_WRONLY	proc.c	10;"	d	file:
O_WRONLY	snitchaser_main.c	75;"	d	file:
PAGE_MASK	snitchaser_main.c	99;"	d	file:
PAGE_SHIFT	snitchaser_main.c	97;"	d	file:
PAGE_SIZE	snitchaser_main.c	98;"	d	file:
PATCH_SZ	arch_user_entry.h	8;"	d
PINUSE_BIT	malloc.c	2114;"	d	file:
POP_ALL	processor.h	80;"	d
POP_ALL_WITH_ESP	processor.h	81;"	d
POSTACTION	malloc.c	2598;"	d	file:
POSTACTION	malloc.c	2606;"	d	file:
PREACTION	malloc.c	2597;"	d	file:
PREACTION	malloc.c	2602;"	d	file:
PREPARE_EXIT	asm_helper.S.h	21;"	d
PROCEED_ON_ERROR	malloc.c	569;"	d	file:
PROCMAP_GUARD	checkpoint.h	20;"	d
PROT_EXEC	proc.c	15;"	d	file:
PROT_EXEC	snitchaser_main.c	125;"	d	file:
PROT_GROWSDOWN	proc.c	18;"	d	file:
PROT_GROWSDOWN	snitchaser_main.c	128;"	d	file:
PROT_GROWSUP	proc.c	19;"	d	file:
PROT_GROWSUP	snitchaser_main.c	129;"	d	file:
PROT_NONE	proc.c	17;"	d	file:
PROT_NONE	snitchaser_main.c	127;"	d	file:
PROT_READ	proc.c	13;"	d	file:
PROT_READ	snitchaser_main.c	123;"	d	file:
PROT_SEM	proc.c	16;"	d	file:
PROT_SEM	snitchaser_main.c	126;"	d	file:
PROT_WRITE	proc.c	14;"	d	file:
PROT_WRITE	snitchaser_main.c	124;"	d	file:
PTHREAD_MUTEX_RECURSIVE	malloc.c	1834;"	d	file:
PUSH_ALL	processor.h	79;"	d
RDTSC_MARK	marks.h	10;"	d
READ_DEFAULT_LDT	tls.c	22;"	d	file:
READ_LDT	tls.c	20;"	d	file:
RECORD_PROCMASK	signal.h	32;"	d
RECORD_PROCMASK_0	signal.h	30;"	d
RECORD_PROCMASK_1	signal.h	31;"	d
RELEASE_LOCK	malloc.c	1658;"	d	file:
RELEASE_LOCK	malloc.c	1758;"	d	file:
RELEASE_LOCK	malloc.c	1823;"	d	file:
RELEASE_LOCK	malloc.c	1854;"	d	file:
RELEASE_MALLOC_GLOBAL_LOCK	malloc.c	1907;"	d	file:
RELEASE_MALLOC_GLOBAL_LOCK	malloc.c	1911;"	d	file:
RTCHECK	malloc.c	2889;"	d	file:
RTCHECK	malloc.c	2891;"	d	file:
RTCHECK	malloc.c	2894;"	d	file:
R_386_16	elf.h	62;"	d
R_386_16	snitchaser_main.c	38;"	d	file:
R_386_32	elf.h	39;"	d
R_386_32	snitchaser_main.c	15;"	d	file:
R_386_32PLT	elf.h	49;"	d
R_386_32PLT	snitchaser_main.c	25;"	d	file:
R_386_8	elf.h	64;"	d
R_386_8	snitchaser_main.c	40;"	d	file:
R_386_COPY	elf.h	43;"	d
R_386_COPY	snitchaser_main.c	19;"	d	file:
R_386_GLOB_DAT	elf.h	44;"	d
R_386_GLOB_DAT	snitchaser_main.c	20;"	d	file:
R_386_GOT32	elf.h	41;"	d
R_386_GOT32	snitchaser_main.c	17;"	d	file:
R_386_GOTOFF	elf.h	47;"	d
R_386_GOTOFF	snitchaser_main.c	23;"	d	file:
R_386_GOTPC	elf.h	48;"	d
R_386_GOTPC	snitchaser_main.c	24;"	d	file:
R_386_IRELATIVE	elf.h	95;"	d
R_386_IRELATIVE	snitchaser_main.c	71;"	d	file:
R_386_JMP_SLOT	elf.h	45;"	d
R_386_JMP_SLOT	snitchaser_main.c	21;"	d	file:
R_386_NONE	elf.h	38;"	d
R_386_NONE	snitchaser_main.c	14;"	d	file:
R_386_PC16	elf.h	63;"	d
R_386_PC16	snitchaser_main.c	39;"	d	file:
R_386_PC32	elf.h	40;"	d
R_386_PC32	snitchaser_main.c	16;"	d	file:
R_386_PC8	elf.h	65;"	d
R_386_PC8	snitchaser_main.c	41;"	d	file:
R_386_PLT32	elf.h	42;"	d
R_386_PLT32	snitchaser_main.c	18;"	d	file:
R_386_RELATIVE	elf.h	46;"	d
R_386_RELATIVE	snitchaser_main.c	22;"	d	file:
R_386_TLS_DESC	elf.h	91;"	d
R_386_TLS_DESC	snitchaser_main.c	67;"	d	file:
R_386_TLS_DESC_CALL	elf.h	88;"	d
R_386_TLS_DESC_CALL	snitchaser_main.c	64;"	d	file:
R_386_TLS_DTPMOD32	elf.h	83;"	d
R_386_TLS_DTPMOD32	snitchaser_main.c	59;"	d	file:
R_386_TLS_DTPOFF32	elf.h	84;"	d
R_386_TLS_DTPOFF32	snitchaser_main.c	60;"	d	file:
R_386_TLS_GD	elf.h	57;"	d
R_386_TLS_GD	snitchaser_main.c	33;"	d	file:
R_386_TLS_GD_32	elf.h	66;"	d
R_386_TLS_GD_32	snitchaser_main.c	42;"	d	file:
R_386_TLS_GD_CALL	elf.h	69;"	d
R_386_TLS_GD_CALL	snitchaser_main.c	45;"	d	file:
R_386_TLS_GD_POP	elf.h	71;"	d
R_386_TLS_GD_POP	snitchaser_main.c	47;"	d	file:
R_386_TLS_GD_PUSH	elf.h	68;"	d
R_386_TLS_GD_PUSH	snitchaser_main.c	44;"	d	file:
R_386_TLS_GOTDESC	elf.h	87;"	d
R_386_TLS_GOTDESC	snitchaser_main.c	63;"	d	file:
R_386_TLS_GOTIE	elf.h	53;"	d
R_386_TLS_GOTIE	snitchaser_main.c	29;"	d	file:
R_386_TLS_IE	elf.h	51;"	d
R_386_TLS_IE	snitchaser_main.c	27;"	d	file:
R_386_TLS_IE_32	elf.h	79;"	d
R_386_TLS_IE_32	snitchaser_main.c	55;"	d	file:
R_386_TLS_LDM	elf.h	59;"	d
R_386_TLS_LDM	snitchaser_main.c	35;"	d	file:
R_386_TLS_LDM_32	elf.h	72;"	d
R_386_TLS_LDM_32	snitchaser_main.c	48;"	d	file:
R_386_TLS_LDM_CALL	elf.h	75;"	d
R_386_TLS_LDM_CALL	snitchaser_main.c	51;"	d	file:
R_386_TLS_LDM_POP	elf.h	77;"	d
R_386_TLS_LDM_POP	snitchaser_main.c	53;"	d	file:
R_386_TLS_LDM_PUSH	elf.h	74;"	d
R_386_TLS_LDM_PUSH	snitchaser_main.c	50;"	d	file:
R_386_TLS_LDO_32	elf.h	78;"	d
R_386_TLS_LDO_32	snitchaser_main.c	54;"	d	file:
R_386_TLS_LE	elf.h	55;"	d
R_386_TLS_LE	snitchaser_main.c	31;"	d	file:
R_386_TLS_LE_32	elf.h	81;"	d
R_386_TLS_LE_32	snitchaser_main.c	57;"	d	file:
R_386_TLS_TPOFF	elf.h	50;"	d
R_386_TLS_TPOFF	snitchaser_main.c	26;"	d	file:
R_386_TLS_TPOFF32	elf.h	85;"	d
R_386_TLS_TPOFF32	snitchaser_main.c	61;"	d	file:
SET_INTERP_RETADDR	interp_main.c	106;"	d	file:
SIGKILL_REPLACE	signal.h	16;"	d
SIGNAL_MARK	marks.h	13;"	d
SIGNAL_RETURN_MARK	marks.h	16;"	d
SIGNAL_TERMINATE_MARK	marks.h	14;"	d
SIGNAL_USER_HANDLER_MARK	marks.h	15;"	d
SIX_SIZE_T_SIZES	malloc.c	1447;"	d	file:
SIZE_T_BITSIZE	malloc.c	1437;"	d	file:
SIZE_T_FOUR	malloc.c	1444;"	d	file:
SIZE_T_ONE	malloc.c	1442;"	d	file:
SIZE_T_SIZE	malloc.c	1436;"	d	file:
SIZE_T_TWO	malloc.c	1443;"	d	file:
SIZE_T_ZERO	malloc.c	1441;"	d	file:
SMALLBIN_SHIFT	malloc.c	2434;"	d	file:
SMALLBIN_WIDTH	malloc.c	2435;"	d	file:
SNITCHASER_TPD_H	snitchaser_tpd.h	10;"	d
SPINS_PER_YIELD	malloc.c	1660;"	d	file:
SPINS_PER_YIELD	malloc.c	1760;"	d	file:
SPIN_LOCKS_AVAILABLE	malloc.c	536;"	d	file:
SPIN_LOCKS_AVAILABLE	malloc.c	538;"	d	file:
STACK_AUXV_INFO	startup_stack.h	44;"	d
STACK_INFO	startup_stack.h	43;"	d
STDERR_FILENO	debug.c	17;"	d	file:
STRUCT_MALLINFO_DECLARED	malloc.c	701;"	d	file:
STT_SPARC_REGISTER	elf.h	102;"	d
SYSCALL_MARK	marks.h	11;"	d
SYS_ALLOC_PADDING	malloc.c	2539;"	d	file:
SZ_MAP	tls.c	29;"	d	file:
TLS_AREA_SIZE	tls.h	17;"	d
TLS_INFO_SZ	arch_checkpoint.c	94;"	d	file:
TOP_FOOT_SIZE	malloc.c	2583;"	d	file:
TREEBIN_SHIFT	malloc.c	2436;"	d	file:
TRY_LOCK	malloc.c	1659;"	d	file:
TRY_LOCK	malloc.c	1759;"	d	file:
TRY_LOCK	malloc.c	1824;"	d	file:
TRY_LOCK	malloc.c	1855;"	d	file:
TWO_SIZE_T_SIZES	malloc.c	1445;"	d	file:
USAGE_ERROR_ACTION	malloc.c	2628;"	d	file:
USAGE_ERROR_ACTION	malloc.c	2637;"	d	file:
USE_BUILTIN_FFS	malloc.c	644;"	d	file:
USE_DEV_RANDOM	malloc.c	647;"	d	file:
USE_LOCKS	malloc.c	572;"	d	file:
USE_LOCK_BIT	malloc.c	1896;"	d	file:
USE_LOCK_BIT	malloc.c	1898;"	d	file:
USE_MMAP_BIT	malloc.c	1563;"	d	file:
USE_MMAP_BIT	malloc.c	1581;"	d	file:
USE_NONCONTIGUOUS_BIT	malloc.c	1605;"	d	file:
USE_SPIN_LOCKS	malloc.c	576;"	d	file:
USE_SPIN_LOCKS	malloc.c	578;"	d	file:
WIN32	malloc.c	490;"	d	file:
WIN32	malloc.c	494;"	d	file:
WIN32_LEAN_AND_MEAN	malloc.c	498;"	d	file:
WRITE_LDT	tls.c	23;"	d	file:
WRITE_LDT_OLD	tls.c	21;"	d	file:
X86_ARCH_USER_ENTRY_H	arch_user_entry.h	6;"	d
_AC	snitchaser_main.c	89;"	d	file:
_AC	snitchaser_main.c	93;"	d	file:
_AT	snitchaser_main.c	90;"	d	file:
_AT	snitchaser_main.c	94;"	d	file:
_BitScanForward	malloc.c	/^unsigned char _BitScanForward(unsigned long *index, unsigned long mask);$/;"	p	file:	signature:(unsigned long *index, unsigned long mask)
_BitScanReverse	malloc.c	/^unsigned char _BitScanReverse(unsigned long *index, unsigned long mask);$/;"	p	file:	signature:(unsigned long *index, unsigned long mask)
_InterlockedCompareExchange	malloc.c	/^LONG __cdecl _InterlockedCompareExchange(LONG volatile *Dest, LONG Exchange, LONG Comp);$/;"	p	file:	signature:(LONG volatile *Dest, LONG Exchange, LONG Comp)
_InterlockedExchange	malloc.c	/^LONG __cdecl _InterlockedExchange(LONG volatile *Target, LONG Value);$/;"	p	file:	signature:(LONG volatile *Target, LONG Value)
_LOADER_TLS_H	tls.h	7;"	d
_SC_PAGE_SIZE	malloc.c	1388;"	d	file:
__AC	snitchaser_main.c	92;"	d	file:
__ASM_HELPER_S_H	asm_helper.S.h	7;"	d
__CHECKPOINT_H	checkpoint.h	7;"	d
__COMPRESSION_H	compression.h	7;"	d
__DEBUG_C	debug.c	8;"	d	file:
__INTERP_BIGBUFFER_H	bigbuffer.h	12;"	d
__INTERP_MAIN_H	interp_main.h	19;"	d
__LOGGER_H	logger.h	7;"	d
__LOGGER_TPD_H	logger_tpd.h	7;"	d
__PROCESSOR_H	processor.h	2;"	d
__PROC_H	proc.h	2;"	d
__SNITCHASER_ENV_CONF_ENTRIES_H	env_conf.c	35;"	d	file:
__SNITCHASER_ENV_CONF_ENTRIES_H	env_conf.c	37;"	d	file:
__SNITCHASER_ENV_CONF_ENTRIES_H	env_conf.c	76;"	d	file:
__SNITCHASER_ENV_CONF_ENTRIES_H	env_conf.c	78;"	d	file:
__SNITCHASER_ENV_CONF_ENTRIES_H	env_conf.h	16;"	d
__SNITCHASER_ENV_CONF_ENTRIES_H	env_conf.h	18;"	d
__SNITCHASER_MAIN_H	snitchaser_main.h	19;"	d
__USE_GNU	malloc.c	1320;"	d	file:
__USE_GNU	malloc.c	1322;"	d	file:
__WRAPPER_H	wrapper.h	20;"	d
__X86_FUTEX_H	futex.h	9;"	d
__X86_MUTEX_H	mutex.h	7;"	d
___bottom_tls	snitchaser_tpd.h	/^struct ___bottom_tls {$/;"	s
___bottom_tls::td	snitchaser_tpd.h	/^	struct tls_desc td;$/;"	m	struct:___bottom_tls	typeref:struct:___bottom_tls::tls_desc	access:public
___bottom_tls::tpd	snitchaser_tpd.h	/^	struct thread_private_data tpd;$/;"	m	struct:___bottom_tls	typeref:struct:___bottom_tls::thread_private_data	access:public
__anon1::__anon2::a_val	interp_main.c	/^      uint32_t a_val;		\/* Integer value *\/$/;"	m	union:__anon1::__anon2	file:	access:public
__anon1::a_type	interp_main.c	/^  uint32_t a_type;		\/* Entry type *\/$/;"	m	struct:__anon1	file:	access:public
__anon1::a_un	interp_main.c	/^    } a_un;$/;"	m	struct:__anon1	typeref:union:__anon1::__anon2	file:	access:public
_atoi	env_conf.c	/^_atoi(const char * x)$/;"	f	file:	signature:(const char * x)
_gm_	malloc.c	/^static struct malloc_state _gm_;$/;"	v	typeref:struct:malloc_state	file:
a_type	interp_main.c	/^  uint32_t a_type;		\/* Entry type *\/$/;"	m	struct:__anon1	file:	access:public
a_un	interp_main.c	/^    } a_un;$/;"	m	struct:__anon1	typeref:union:__anon1::__anon2	file:	access:public
a_val	interp_main.c	/^      uint32_t a_val;		\/* Integer value *\/$/;"	m	union:__anon1::__anon2	file:	access:public
active_tls	tls.h	/^active_tls(struct tls_desc * desc)$/;"	f	signature:(struct tls_desc * desc)
add_segment	malloc.c	/^static void add_segment(mstate m, char* tbase, size_t tsize, flag_t mmapped) {$/;"	f	file:	signature:(mstate m, char* tbase, size_t tsize, flag_t mmapped)
align_as_chunk	malloc.c	2089;"	d	file:
align_offset	malloc.c	1457;"	d	file:
alloc_from_buk	mm.c	/^alloc_from_buk(struct obj_buk_head * buk, size_t size)$/;"	f	file:	signature:(struct obj_buk_head * buk, size_t size)
alloc_obj	mm.c	/^alloc_obj(struct obj_mm_tpd_stub * objmm, size_t size)$/;"	f	signature:(struct obj_mm_tpd_stub * objmm, size_t size)
alloc_obj	mm.h	/^alloc_obj(struct obj_mm_tpd_stub * obj_mm_tls, size_t size);$/;"	p	signature:(struct obj_mm_tpd_stub * obj_mm_tls, size_t size)
alloc_obj_buk	mm.c	/^alloc_obj_buk(bool_t executable)$/;"	f	file:	signature:(bool_t executable)
alloc_self_obj	mm.c	/^alloc_self_obj(size_t size)$/;"	f	signature:(size_t size)
alloc_self_obj	mm.h	/^alloc_self_obj(size_t size);$/;"	p	signature:(size_t size)
alloc_tls_area	tls.c	/^alloc_tls_area(void)$/;"	f	signature:(void)
alloc_tls_area	tls.h	/^alloc_tls_area(void);$/;"	p	signature:(void)
append_bigbuffer	bigbuffer.c	/^append_bigbuffer(int fd, struct bigbuffer * bb, const void * buf, size_t sz)$/;"	f	signature:(int fd, struct bigbuffer * bb, const void * buf, size_t sz)
append_bigbuffer	bigbuffer.h	/^append_bigbuffer(int fd, struct bigbuffer * bb, const void * buf, size_t sz);$/;"	p	signature:(int fd, struct bigbuffer * bb, const void * buf, size_t sz)
append_logger	logger.c	/^append_logger(void * data, size_t size)$/;"	f	signature:(void * data, size_t size)
append_logger	logger.h	/^append_logger(void * data, size_t size);$/;"	p	signature:(void * data, size_t size)
append_self_bigbuffer	bigbuffer.c	/^append_self_bigbuffer(int fd, const void * buf, size_t sz)$/;"	f	signature:(int fd, const void * buf, size_t sz)
append_self_bigbuffer	bigbuffer.h	/^append_self_bigbuffer(int fd, const void * buf, size_t sz);$/;"	p	signature:(int fd, const void * buf, size_t sz)
arch_ckpt_mark	arch_checkpoint.h	/^enum arch_ckpt_mark {$/;"	g
arch_cpuinfo_s	arch_checkpoint.c	/^struct arch_cpuinfo_s {$/;"	s	file:
arch_cpuinfo_s::fx	arch_checkpoint.c	/^	struct i387_fxsave_struct fx;$/;"	m	struct:arch_cpuinfo_s	typeref:struct:arch_cpuinfo_s::i387_fxsave_struct	file:	access:public
arch_cpuinfo_s::fxmark	arch_checkpoint.c	/^	enum arch_ckpt_mark fxmark;$/;"	m	struct:arch_cpuinfo_s	typeref:enum:arch_cpuinfo_s::arch_ckpt_mark	file:	access:public
arch_cpuinfo_s::fxsz	arch_checkpoint.c	/^	size_t fxsz;$/;"	m	struct:arch_cpuinfo_s	file:	access:public
arch_cpuinfo_s::u	arch_checkpoint.c	/^	struct user_regs_struct u;$/;"	m	struct:arch_cpuinfo_s	typeref:struct:arch_cpuinfo_s::user_regs_struct	file:	access:public
arch_cpuinfo_s::umark	arch_checkpoint.c	/^	enum arch_ckpt_mark umark;$/;"	m	struct:arch_cpuinfo_s	typeref:enum:arch_cpuinfo_s::arch_ckpt_mark	file:	access:public
arch_cpuinfo_s::usz	arch_checkpoint.c	/^	size_t usz;$/;"	m	struct:arch_cpuinfo_s	file:	access:public
arch_flush_logger	arch_logger.c	/^arch_flush_logger(struct pusha_regs * r)$/;"	f	signature:(struct pusha_regs * r)
arch_patch_user_entry	arch_user_entry.c	/^arch_patch_user_entry(void * uentry, void * rep_start,$/;"	f	signature:(void * uentry, void * rep_start, size_t rep_sz, uint32_t prot)
arch_patch_user_entry	user_entry.h	/^arch_patch_user_entry(void * uentry, void * rep_start,$/;"	p	signature:(void * uentry, void * rep_start, size_t rep_sz, uint32_t prot)
arch_post_syscall	arch_syscall.c	/^arch_post_syscall(struct pusha_regs * r)$/;"	f	signature:(struct pusha_regs * r)
arch_pre_syscall	arch_syscall.c	/^arch_pre_syscall(struct pusha_regs * r)$/;"	f	signature:(struct pusha_regs * r)
arch_user_entry	arch_user_entry.c	/^arch_user_entry(struct pusha_regs * regs)$/;"	f	signature:(struct pusha_regs * regs)
arena	malloc.c	/^  MALLINFO_FIELD_TYPE arena;    \/* non-mmapped space allocated from system *\/$/;"	m	struct:mallinfo	file:	access:public
asm_curr_ptr	logger_tpd.h	/^	uintptr_t asm_curr_ptr;$/;"	m	struct:logger_tpd_stub	access:public
asm_end_ptr	logger_tpd.h	/^	uintptr_t asm_end_ptr;$/;"	m	struct:logger_tpd_stub	access:public
assert	malloc.c	1297;"	d	file:
assert	malloc.c	1298;"	d	file:
assert	malloc.c	1304;"	d	file:
auxv_info	startup_stack.h	/^	struct auxv_info auxv_info;$/;"	m	struct:startup_stack_info	typeref:struct:startup_stack_info::auxv_info	access:public
auxv_info	startup_stack.h	/^struct auxv_info {$/;"	s
auxv_info::p_base	startup_stack.h	/^	void ** p_base;$/;"	m	struct:auxv_info	access:public
auxv_info::p_execfn	startup_stack.h	/^	const char ** p_execfn;$/;"	m	struct:auxv_info	access:public
auxv_info::p_nr_user_phdrs	startup_stack.h	/^	int * p_nr_user_phdrs;$/;"	m	struct:auxv_info	access:public
auxv_info::p_sysinfo	startup_stack.h	/^	void ** p_sysinfo;$/;"	m	struct:auxv_info	access:public
auxv_info::p_user_entry	startup_stack.h	/^	void ** p_user_entry;$/;"	m	struct:auxv_info	access:public
auxv_info::pp_sysinfo_ehdr	startup_stack.h	/^	struct elf_phdr ** pp_sysinfo_ehdr;$/;"	m	struct:auxv_info	typeref:struct:auxv_info::elf_phdr	access:public
auxv_info::pp_user_phdrs	startup_stack.h	/^	struct elf_phdr ** pp_user_phdrs;$/;"	m	struct:auxv_info	typeref:struct:auxv_info::elf_phdr	access:public
aval_size	mm.h	/^	size_t aval_size;$/;"	m	struct:obj_buk_head	access:public
barrier	processor.h	51;"	d
base	malloc.c	/^  char*        base;             \/* base address *\/$/;"	m	struct:malloc_segment	file:	access:public
bb	snitchaser_tpd.h	/^	struct bigbuffer bb;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::bigbuffer	access:public
bigbuffer	bigbuffer.h	/^struct bigbuffer {$/;"	s
bigbuffer::buffer	bigbuffer.h	/^	uint8_t buffer[(BIGBUFFER_SZ)];$/;"	m	struct:bigbuffer	access:public
bigbuffer::ptr	bigbuffer.h	/^	uintptr_t ptr;$/;"	m	struct:bigbuffer	access:public
bin_find	malloc.c	/^static int    bin_find(mstate m, mchunkptr x);$/;"	p	file:	signature:(mstate m, mchunkptr x)
bin_find	malloc.c	/^static int bin_find(mstate m, mchunkptr x) {$/;"	f	file:	signature:(mstate m, mchunkptr x)
bindex_t	malloc.c	/^typedef unsigned int bindex_t;         \/* Described below *\/$/;"	t	file:
binmap_t	malloc.c	/^typedef unsigned int binmap_t;         \/* Described below *\/$/;"	t	file:
bit_for_tree_index	malloc.c	2752;"	d	file:
bk	malloc.c	/^  struct malloc_chunk* bk;$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:	access:public
bk	malloc.c	/^  struct malloc_tree_chunk* bk;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:	access:public
bkup_regs	syscall_tpd.h	/^	struct pusha_regs bkup_regs;$/;"	m	struct:syscall_tpd_stub	typeref:struct:syscall_tpd_stub::pusha_regs	access:public
bkup_stack_top	syscall_tpd.h	/^	void * bkup_stack_top;$/;"	m	struct:syscall_tpd_stub	access:public
block_signals	signal.h	/^block_signals(void);$/;"	p	signature:(void)
bool_conf	env_conf.c	33;"	d	file:
bool_conf	env_conf.c	39;"	d	file:
bool_conf	env_conf.c	56;"	d	file:
bool_conf	env_conf.c	80;"	d	file:
bool_conf	env_conf.h	14;"	d
bool_conf	env_conf.h	20;"	d
bottom_exec_fn	startup_stack.h	/^	const char * bottom_exec_fn;$/;"	m	struct:startup_stack_info	access:public
brk	checkpoint.h	/^	uintptr_t brk;$/;"	m	struct:checkpoint_head	access:public
buffer	bigbuffer.h	/^	uint8_t buffer[(BIGBUFFER_SZ)];$/;"	m	struct:bigbuffer	access:public
buk_addr	mm.h	/^	void * buk_addr;$/;"	m	struct:obj_buk_head	access:public
buk_end	mm.h	/^	void * buk_end;$/;"	m	struct:obj_buk_head	access:public
buk_list	mm.h	/^	struct list_head buk_list;$/;"	m	struct:obj_mm_tpd_stub	typeref:struct:obj_mm_tpd_stub::list_head	access:public
c	malloc.c	/^  unsigned int c;$/;"	m	struct:pthread_mlock_t	file:	access:public
c	malloc.c	/^  unsigned int c;$/;"	m	struct:win32_mlock_t	file:	access:public
calloc_must_clear	malloc.c	2162;"	d	file:
calloc_must_clear	malloc.c	2164;"	d	file:
change_mparam	malloc.c	/^static int change_mparam(int param_number, int value) {$/;"	f	file:	signature:(int param_number, int value)
check_arch_gdt_min	arch_checkpoint.c	/^check_arch_gdt_min(struct user_desc * pd)$/;"	f	file:	signature:(struct user_desc * pd)
check_free_chunk	malloc.c	2646;"	d	file:
check_free_chunk	malloc.c	2654;"	d	file:
check_inuse_chunk	malloc.c	2647;"	d	file:
check_inuse_chunk	malloc.c	2655;"	d	file:
check_malloc_state	malloc.c	2650;"	d	file:
check_malloc_state	malloc.c	2659;"	d	file:
check_malloced_chunk	malloc.c	2648;"	d	file:
check_malloced_chunk	malloc.c	2657;"	d	file:
check_mmapped_chunk	malloc.c	2649;"	d	file:
check_mmapped_chunk	malloc.c	2658;"	d	file:
check_top_chunk	malloc.c	2651;"	d	file:
check_top_chunk	malloc.c	2656;"	d	file:
check_var	env_conf.c	/^check_var(const char * entry)$/;"	f	file:	signature:(const char * entry)
checkpoint_head	checkpoint.h	/^struct checkpoint_head {$/;"	s
checkpoint_head::brk	checkpoint.h	/^	uintptr_t brk;$/;"	m	struct:checkpoint_head	access:public
checkpoint_head::magic	checkpoint.h	/^	char magic[sizeof(CKPT_VERSION_STRING)];$/;"	m	struct:checkpoint_head	access:public
checkpoint_head::pid	checkpoint.h	/^	uint32_t pid;$/;"	m	struct:checkpoint_head	access:public
checkpoint_head::stack_top	checkpoint.h	/^	uintptr_t stack_top;$/;"	m	struct:checkpoint_head	access:public
checkpoint_head::tid	checkpoint.h	/^	uint32_t tid;$/;"	m	struct:checkpoint_head	access:public
checkpoint_head::tnr	checkpoint.h	/^	int tnr;$/;"	m	struct:checkpoint_head	access:public
child	malloc.c	/^  struct malloc_tree_chunk* child[2];$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:	access:public
chunk2mem	malloc.c	2086;"	d	file:
chunk_minus_offset	malloc.c	2135;"	d	file:
chunk_plus_offset	malloc.c	2134;"	d	file:
chunksize	malloc.c	2129;"	d	file:
cinuse	malloc.c	2124;"	d	file:
ckpt_archinfo	checkpoint.c	/^ckpt_archinfo(int fd, struct pusha_regs * regs, void * pc)$/;"	f	file:	signature:(int fd, struct pusha_regs * regs, void * pc)
ckpt_baseinfo	checkpoint.c	/^ckpt_baseinfo(int fd)$/;"	f	file:	signature:(int fd)
ckpt_fd	snitchaser_main.c	/^int SCOPE ckpt_fd = 0;$/;"	v
ckpt_mark	checkpoint.h	/^enum ckpt_mark {$/;"	g
ckpt_meminfo	checkpoint.c	/^ckpt_meminfo(int fd)$/;"	f	file:	signature:(int fd)
ckpt_memseg	checkpoint.c	/^ckpt_memseg(int fd, struct proc_mem_region r)$/;"	f	file:	signature:(int fd, struct proc_mem_region r)
ckpt_sz	checkpoint.h	/^	size_t ckpt_sz;$/;"	m	struct:map_file_info	access:public
clean_mm_obj	mm.c	/^clean_mm_obj(struct obj_mm_tpd_stub * objmm)$/;"	f	signature:(struct obj_mm_tpd_stub * objmm)
clean_mm_obj	mm.h	/^clean_mm_obj(struct obj_mm_tpd_stub * obj_mm_tls);$/;"	p	signature:(struct obj_mm_tpd_stub * obj_mm_tls)
clean_self_mm_obj	mm.c	/^clean_self_mm_obj(void)$/;"	f	signature:(void)
clean_self_mm_obj	mm.h	/^clean_self_mm_obj(void);$/;"	p	signature:(void)
clear_all_thread_mem	checkpoint.c	/^clear_all_thread_mem(void)$/;"	f	file:	signature:(void)
clear_ldt	tls.c	/^clear_ldt(struct tls_desc * td)$/;"	f	file:	signature:(struct tls_desc * td)
clear_pinuse	malloc.c	2131;"	d	file:
clear_slot	tls.c	/^clear_slot(unsigned int tnr)$/;"	f	file:	signature:(unsigned int tnr)
clear_smallmap	malloc.c	2773;"	d	file:
clear_treemap	malloc.c	2777;"	d	file:
cmdline_argbegin	startup_stack.h	/^	const char * cmdline_argbegin;$/;"	m	struct:startup_stack_info	access:public
cmdline_argend	startup_stack.h	/^	const char * cmdline_argend;$/;"	m	struct:startup_stack_info	access:public
cmp_get	env_conf.c	47;"	d	file:
comp_block_head	compression.h	/^struct comp_block_head {$/;"	s
comp_block_head::comp_sz	compression.h	/^	size_t comp_sz;$/;"	m	struct:comp_block_head	access:public
comp_block_head::ori_sz	compression.h	/^	size_t ori_sz;$/;"	m	struct:comp_block_head	access:public
comp_block_head::type	compression.h	/^	enum comp_block_type type;$/;"	m	struct:comp_block_head	typeref:enum:comp_block_head::comp_block_type	access:public
comp_block_type	compression.h	/^enum comp_block_type {$/;"	g
comp_sz	compression.h	/^	size_t comp_sz;$/;"	m	struct:comp_block_head	access:public
compute_bit2idx	malloc.c	2792;"	d	file:
compute_bit2idx	malloc.c	2800;"	d	file:
compute_bit2idx	malloc.c	2808;"	d	file:
compute_bit2idx	malloc.c	2816;"	d	file:
compute_bit2idx	malloc.c	2819;"	d	file:
compute_tree_index	malloc.c	2688;"	d	file:
compute_tree_index	malloc.c	2703;"	d	file:
compute_tree_index	malloc.c	2717;"	d	file:
compute_tree_index	malloc.c	2732;"	d	file:
create_mspace	malloc.c	/^mspace create_mspace(size_t capacity, int locked) {$/;"	f	signature:(size_t capacity, int locked)
create_mspace	malloc.c	/^mspace create_mspace(size_t capacity, int locked);$/;"	p	file:	signature:(size_t capacity, int locked)
create_mspace_with_base	malloc.c	/^mspace create_mspace_with_base(void* base, size_t capacity, int locked) {$/;"	f	signature:(void* base, size_t capacity, int locked)
create_mspace_with_base	malloc.c	/^mspace create_mspace_with_base(void* base, size_t capacity, int locked);$/;"	p	file:	signature:(void* base, size_t capacity, int locked)
cur_buk	mm.h	/^	struct obj_buk_head * cur_buk;$/;"	m	struct:obj_mm_tpd_stub	typeref:struct:obj_mm_tpd_stub::obj_buk_head	access:public
cur_ptr	mm.h	/^	void * cur_ptr;$/;"	m	struct:obj_buk_head	access:public
curr_ptr	proc.h	/^	char * curr_ptr;$/;"	m	struct:proc_mem_handler_t	access:public
curr_syscall_nr	syscall_tpd.h	/^	int curr_syscall_nr;$/;"	m	struct:syscall_tpd_stub	access:public
dbg_init	debug.c	/^dbg_init(void)$/;"	f	signature:(void)
dbg_output	debug.c	/^dbg_output(enum __debug_level level,$/;"	f	signature:(enum __debug_level level, enum __debug_component comp, const char * file ATTR(unused), const char * func, int line, char * fmt, ...)
deactive_tls	tls.h	/^deactive_tls(void)$/;"	f	signature:(void)
dead_checkpoint	checkpoint.c	/^dead_checkpoint(struct pusha_regs * regs, void * pc, void * stack_top)$/;"	f	signature:(struct pusha_regs * regs, void * pc, void * stack_top)
dead_checkpoint	checkpoint.h	/^dead_checkpoint(struct pusha_regs * regs, void * pc,$/;"	p	signature:(struct pusha_regs * regs, void * pc, void * stack_top)
dealloc_tls_area	tls.c	/^dealloc_tls_area(struct tls_desc * td)$/;"	f	signature:(struct tls_desc * td)
dealloc_tls_area	tls.h	/^dealloc_tls_area(struct tls_desc * desc);$/;"	p	signature:(struct tls_desc * desc)
dealloc_tls_area_nolock	tls.c	/^dealloc_tls_area_nolock(struct tls_desc * td)$/;"	f	signature:(struct tls_desc * td)
dealloc_tls_area_nolock	tls.h	/^dealloc_tls_area_nolock(struct tls_desc * desc);$/;"	p	signature:(struct tls_desc * desc)
decompress	compression.c	/^decompress(const unsigned char *src, size_t src_len,$/;"	f	signature:(const unsigned char *src, size_t src_len, unsigned char *dst, size_t *dst_len)
decompress	compression.h	/^decompress(const unsigned char *src, size_t src_len,$/;"	p	signature:(const unsigned char *src, size_t src_len, unsigned char *dst, size_t *dst_len)
def_append_logger_TYPE	logger.h	46;"	d
def_append_logger_TYPE	logger.h	66;"	d
def_get_addr_from_self_tpd	snitchaser_tpd.h	61;"	d
default_mflags	malloc.c	/^  flag_t default_mflags;$/;"	m	struct:malloc_params	file:	access:public
destroy_mspace	malloc.c	/^size_t destroy_mspace(mspace msp) {$/;"	f	signature:(mspace msp)
destroy_mspace	malloc.c	/^size_t destroy_mspace(mspace msp);$/;"	p	file:	signature:(mspace msp)
dev_zero_fd	malloc.c	/^static int dev_zero_fd = -1; \/* Cached file descriptor for \/dev\/zero. *\/$/;"	v	file:
disable_contiguous	malloc.c	2514;"	d	file:
disable_lock	malloc.c	2507;"	d	file:
disable_mmap	malloc.c	2511;"	d	file:
dlcalloc	malloc.c	/^void* dlcalloc(size_t n_elements, size_t elem_size) {$/;"	f	signature:(size_t n_elements, size_t elem_size)
dlcalloc	malloc.c	/^void* dlcalloc(size_t, size_t);$/;"	p	file:
dlcalloc	malloc.c	755;"	d	file:
dlfree	malloc.c	/^void  dlfree(void*);$/;"	p	file:	signature:(void*)
dlfree	malloc.c	/^void dlfree(void* mem) {$/;"	f	signature:(void* mem)
dlfree	malloc.c	756;"	d	file:
dlindependent_calloc	malloc.c	/^void** dlindependent_calloc(size_t n_elements, size_t elem_size,$/;"	f	signature:(size_t n_elements, size_t elem_size, void* chunks[])
dlindependent_calloc	malloc.c	/^void** dlindependent_calloc(size_t, size_t, void**);$/;"	p	file:	signature:(size_t, size_t, void**)
dlindependent_calloc	malloc.c	769;"	d	file:
dlindependent_comalloc	malloc.c	/^void** dlindependent_comalloc(size_t n_elements, size_t sizes[],$/;"	f	signature:(size_t n_elements, size_t sizes[], void* chunks[])
dlindependent_comalloc	malloc.c	/^void** dlindependent_comalloc(size_t, size_t*, void**);$/;"	p	file:	signature:(size_t, size_t*, void**)
dlindependent_comalloc	malloc.c	770;"	d	file:
dlmallinfo	malloc.c	/^struct mallinfo dlmallinfo(void) {$/;"	f	signature:(void)
dlmallinfo	malloc.c	/^struct mallinfo dlmallinfo(void);$/;"	p	file:	signature:(void)
dlmallinfo	malloc.c	762;"	d	file:
dlmalloc	malloc.c	/^void* dlmalloc(size_t bytes) {$/;"	f	signature:(size_t bytes)
dlmalloc	malloc.c	/^void* dlmalloc(size_t);$/;"	p	file:
dlmalloc	malloc.c	757;"	d	file:
dlmalloc_footprint	malloc.c	/^size_t dlmalloc_footprint(void) {$/;"	f	signature:(void)
dlmalloc_footprint	malloc.c	/^size_t dlmalloc_footprint(void);$/;"	p	file:	signature:(void)
dlmalloc_footprint	malloc.c	767;"	d	file:
dlmalloc_max_footprint	malloc.c	/^size_t dlmalloc_max_footprint(void) {$/;"	f	signature:(void)
dlmalloc_max_footprint	malloc.c	/^size_t dlmalloc_max_footprint(void);$/;"	p	file:	signature:(void)
dlmalloc_max_footprint	malloc.c	768;"	d	file:
dlmalloc_stats	malloc.c	/^void  dlmalloc_stats(void);$/;"	p	file:	signature:(void)
dlmalloc_stats	malloc.c	/^void dlmalloc_stats() {$/;"	f
dlmalloc_stats	malloc.c	765;"	d	file:
dlmalloc_trim	malloc.c	/^int  dlmalloc_trim(size_t);$/;"	p	file:
dlmalloc_trim	malloc.c	/^int dlmalloc_trim(size_t pad) {$/;"	f	signature:(size_t pad)
dlmalloc_trim	malloc.c	764;"	d	file:
dlmalloc_usable_size	malloc.c	/^size_t dlmalloc_usable_size(void* mem) {$/;"	f	signature:(void* mem)
dlmalloc_usable_size	malloc.c	/^size_t dlmalloc_usable_size(void*);$/;"	p	file:	signature:(void*)
dlmalloc_usable_size	malloc.c	766;"	d	file:
dlmallopt	malloc.c	/^int dlmallopt(int param_number, int value) {$/;"	f	signature:(int param_number, int value)
dlmallopt	malloc.c	/^int dlmallopt(int, int);$/;"	p	file:	signature:(int, int)
dlmallopt	malloc.c	763;"	d	file:
dlmemalign	malloc.c	/^void* dlmemalign(size_t alignment, size_t bytes) {$/;"	f	signature:(size_t alignment, size_t bytes)
dlmemalign	malloc.c	/^void* dlmemalign(size_t, size_t);$/;"	p	file:
dlmemalign	malloc.c	758;"	d	file:
dlpvalloc	malloc.c	/^void*  dlpvalloc(size_t);$/;"	p	file:
dlpvalloc	malloc.c	/^void* dlpvalloc(size_t bytes) {$/;"	f	signature:(size_t bytes)
dlpvalloc	malloc.c	761;"	d	file:
dlrealloc	malloc.c	/^void* dlrealloc(void* oldmem, size_t bytes) {$/;"	f	signature:(void* oldmem, size_t bytes)
dlrealloc	malloc.c	/^void* dlrealloc(void*, size_t);$/;"	p	file:	signature:(void*, size_t)
dlrealloc	malloc.c	759;"	d	file:
dlvalloc	malloc.c	/^void* dlvalloc(size_t bytes) {$/;"	f	signature:(size_t bytes)
dlvalloc	malloc.c	/^void* dlvalloc(size_t);$/;"	p	file:
dlvalloc	malloc.c	760;"	d	file:
do_check_any_chunk	malloc.c	/^static void   do_check_any_chunk(mstate m, mchunkptr p);$/;"	p	file:	signature:(mstate m, mchunkptr p)
do_check_any_chunk	malloc.c	/^static void do_check_any_chunk(mstate m, mchunkptr p) {$/;"	f	file:	signature:(mstate m, mchunkptr p)
do_check_free_chunk	malloc.c	/^static void   do_check_free_chunk(mstate m, mchunkptr p);$/;"	p	file:	signature:(mstate m, mchunkptr p)
do_check_free_chunk	malloc.c	/^static void do_check_free_chunk(mstate m, mchunkptr p) {$/;"	f	file:	signature:(mstate m, mchunkptr p)
do_check_inuse_chunk	malloc.c	/^static void   do_check_inuse_chunk(mstate m, mchunkptr p);$/;"	p	file:	signature:(mstate m, mchunkptr p)
do_check_inuse_chunk	malloc.c	/^static void do_check_inuse_chunk(mstate m, mchunkptr p) {$/;"	f	file:	signature:(mstate m, mchunkptr p)
do_check_malloc_state	malloc.c	/^static void   do_check_malloc_state(mstate m);$/;"	p	file:	signature:(mstate m)
do_check_malloc_state	malloc.c	/^static void do_check_malloc_state(mstate m) {$/;"	f	file:	signature:(mstate m)
do_check_malloced_chunk	malloc.c	/^static void   do_check_malloced_chunk(mstate m, void* mem, size_t s);$/;"	p	file:	signature:(mstate m, void* mem, size_t s)
do_check_malloced_chunk	malloc.c	/^static void do_check_malloced_chunk(mstate m, void* mem, size_t s) {$/;"	f	file:	signature:(mstate m, void* mem, size_t s)
do_check_mmapped_chunk	malloc.c	/^static void   do_check_mmapped_chunk(mstate m, mchunkptr p);$/;"	p	file:	signature:(mstate m, mchunkptr p)
do_check_mmapped_chunk	malloc.c	/^static void do_check_mmapped_chunk(mstate m, mchunkptr p) {$/;"	f	file:	signature:(mstate m, mchunkptr p)
do_check_smallbin	malloc.c	/^static void   do_check_smallbin(mstate m, bindex_t i);$/;"	p	file:	signature:(mstate m, bindex_t i)
do_check_smallbin	malloc.c	/^static void do_check_smallbin(mstate m, bindex_t i) {$/;"	f	file:	signature:(mstate m, bindex_t i)
do_check_top_chunk	malloc.c	/^static void   do_check_top_chunk(mstate m, mchunkptr p);$/;"	p	file:	signature:(mstate m, mchunkptr p)
do_check_top_chunk	malloc.c	/^static void do_check_top_chunk(mstate m, mchunkptr p) {$/;"	f	file:	signature:(mstate m, mchunkptr p)
do_check_tree	malloc.c	/^static void   do_check_tree(mstate m, tchunkptr t);$/;"	p	file:	signature:(mstate m, tchunkptr t)
do_check_tree	malloc.c	/^static void do_check_tree(mstate m, tchunkptr t) {$/;"	f	file:	signature:(mstate m, tchunkptr t)
do_check_treebin	malloc.c	/^static void   do_check_treebin(mstate m, bindex_t i);$/;"	p	file:	signature:(mstate m, bindex_t i)
do_check_treebin	malloc.c	/^static void do_check_treebin(mstate m, bindex_t i) {$/;"	f	file:	signature:(mstate m, bindex_t i)
do_checkpoint	checkpoint.c	/^do_checkpoint(struct pusha_regs * regs, void * pc, void * stack_top,$/;"	f	file:	signature:(struct pusha_regs * regs, void * pc, void * stack_top, char * fn, pid_t pid, pid_t tid)
do_patch	arch_user_entry.c	/^do_patch(void * inst, void * target)$/;"	f	file:	signature:(void * inst, void * target)
do_real_syscall	wrapper.c	32;"	d	file:
dv	malloc.c	/^  mchunkptr  dv;$/;"	m	struct:malloc_state	file:	access:public
dvsize	malloc.c	/^  size_t     dvsize;$/;"	m	struct:malloc_state	file:	access:public
eax	processor.h	/^	uint32_t eax;$/;"	m	struct:pusha_regs	access:public
ebp	processor.h	/^	uint32_t ebp;$/;"	m	struct:pusha_regs	access:public
ebx	processor.h	/^	uint32_t ebx;$/;"	m	struct:pusha_regs	access:public
ecx	processor.h	/^	uint32_t ecx;$/;"	m	struct:pusha_regs	access:public
edi	processor.h	/^	uint32_t edi;$/;"	m	struct:pusha_regs	access:public
edx	processor.h	/^	uint32_t edx;$/;"	m	struct:pusha_regs	access:public
eflags	processor.h	/^	uint32_t eflags;$/;"	m	struct:pusha_regs	access:public
elf_addr_t	elf.h	23;"	d
elf_addr_t	elf.h	33;"	d
elf_note	elf.h	22;"	d
elf_note	elf.h	32;"	d
elf_phdr	elf.h	20;"	d
elf_phdr	elf.h	30;"	d
elf_shdr	elf.h	21;"	d
elf_shdr	elf.h	31;"	d
elfhdr	elf.h	19;"	d
elfhdr	elf.h	29;"	d
enable_lock	malloc.c	2506;"	d	file:
enable_mmap	malloc.c	2510;"	d	file:
end	checkpoint.h	/^	uintptr_t end;$/;"	m	struct:map_file_info	access:public
end	proc.h	/^	uintptr_t end;$/;"	m	struct:proc_maps_entry_t	access:public
end_ptr	logger_tpd.h	/^	void * end_ptr;$/;"	m	struct:logger_tpd_stub	access:public
ensure_initialization	malloc.c	2488;"	d	file:
enter_user_entry	user_entry.c	/^enter_user_entry(struct pusha_regs * regs, void * pc)$/;"	f	signature:(struct pusha_regs * regs, void * pc)
enter_user_entry	user_entry.h	/^enter_user_entry(struct pusha_regs * regs, void * pc);$/;"	p	signature:(struct pusha_regs * regs, void * pc)
env_conf	env_conf.c	/^struct env_conf env_conf = {$/;"	v	typeref:struct:env_conf
env_conf	env_conf.h	/^struct env_conf {$/;"	s
envbegin	startup_stack.h	/^	const char * envbegin;$/;"	m	struct:startup_stack_info	access:public
envend	startup_stack.h	/^	const char * envend;$/;"	m	struct:startup_stack_info	access:public
esi	processor.h	/^	uint32_t esi;$/;"	m	struct:pusha_regs	access:public
esp	processor.h	/^	uint32_t esp;$/;"	m	struct:pusha_regs	access:public
executable	mm.h	/^	bool_t executable;$/;"	m	struct:obj_mm_tpd_stub	access:public
extp	malloc.c	/^  void*      extp;      \/* Unused but available for extensions *\/$/;"	m	struct:malloc_state	file:	access:public
exts	malloc.c	/^  size_t     exts;$/;"	m	struct:malloc_state	file:	access:public
fd	malloc.c	/^  struct malloc_chunk* fd;         \/* double links -- used only if free. *\/$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:	access:public
fd	malloc.c	/^  struct malloc_tree_chunk* fd;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:	access:public
fdbnprintf	fdbnprintf.c	/^fdbnprintf(int fd, char * buffer, size_t buf_sz,$/;"	f	signature:(int fd, char * buffer, size_t buf_sz, const char * fmt, ...)
find_in_map_by_addr	proc.c	/^find_in_map_by_addr(struct proc_mem_handler_t * handler, const void * addr)$/;"	f	signature:(struct proc_mem_handler_t * handler, const void * addr)
find_in_map_by_fn	proc.c	/^find_in_map_by_fn(struct proc_mem_handler_t * handler,$/;"	f	signature:(struct proc_mem_handler_t * handler, const char * fn, bool_t reset)
find_in_maps_by_addr	proc.h	/^find_in_maps_by_addr(struct proc_mem_handler_t *handler,$/;"	p	signature:(struct proc_mem_handler_t *handler, const void * ptr)
find_in_maps_by_fn	proc.h	/^find_in_maps_by_fn(struct proc_mem_handler_t *handler,$/;"	p	signature:(struct proc_mem_handler_t *handler, const char * file_name, bool_t reset)
find_set_free_slot	tls.c	/^find_set_free_slot(void)$/;"	f	file:	signature:(void)
flag_t	malloc.c	/^typedef unsigned int flag_t;           \/* The type of various bit flag sets *\/$/;"	t	file:
flush_all_logger	logger.c	/^flush_all_logger(void)$/;"	f	signature:(void)
flush_all_logger	logger.h	/^flush_all_logger(void);$/;"	p	signature:(void)
flush_bigbuffer	bigbuffer.c	/^flush_bigbuffer(int fd, struct bigbuffer * bb)$/;"	f	signature:(int fd, struct bigbuffer * bb)
flush_bigbuffer	bigbuffer.h	/^flush_bigbuffer(int fd, struct bigbuffer * bb);$/;"	p	signature:(int fd, struct bigbuffer * bb)
flush_comp_buffer	compression.c	/^flush_comp_buffer(int fd, const void * buffer, size_t sz)$/;"	f	signature:(int fd, const void * buffer, size_t sz)
flush_comp_buffer	compression.h	/^flush_comp_buffer(int fd, const void * buffer, size_t sz);$/;"	p	signature:(int fd, const void * buffer, size_t sz)
flush_logger	logger.c	/^flush_logger(struct logger_tpd_stub * l)$/;"	f	signature:(struct logger_tpd_stub * l)
flush_logger	logger.h	/^flush_logger(struct logger_tpd_stub * l);$/;"	p	signature:(struct logger_tpd_stub * l)
flush_mem_to_ckpt	proc.c	/^flush_mem_to_ckpt(int ckptfd)$/;"	f	signature:(int ckptfd)
flush_mem_to_ckpt	proc.h	/^flush_mem_to_ckpt(int ckptfd);$/;"	p	signature:(int ckptfd)
flush_self_bigbuffer	bigbuffer.c	/^flush_self_bigbuffer(int fd)$/;"	f	signature:(int fd)
flush_self_bigbuffer	bigbuffer.h	/^flush_self_bigbuffer(int fd);$/;"	p	signature:(int fd)
flush_self_logger	logger.h	/^flush_self_logger(void)$/;"	f	signature:(void)
flush_small_buffer	compression.c	/^flush_small_buffer(int fd, const void * buffer, size_t sz)$/;"	f	file:	signature:(int fd, const void * buffer, size_t sz)
fm	malloc.c	4828;"	d	file:
fn	proc.h	/^	char * fn;$/;"	m	struct:proc_maps_entry_t	access:public
fn_len	proc.h	/^	size_t fn_len;$/;"	m	struct:proc_maps_entry_t	access:public
footprint	malloc.c	/^  size_t     footprint;$/;"	m	struct:malloc_state	file:	access:public
fordblks	malloc.c	/^  MALLINFO_FIELD_TYPE fordblks; \/* total free space *\/$/;"	m	struct:mallinfo	file:	access:public
fork_checkpoint	checkpoint.c	/^fork_checkpoint(struct pusha_regs * regs, void * pc,$/;"	f	signature:(struct pusha_regs * regs, void * pc, void * stack_top, struct timeval * ptv)
fork_checkpoint	checkpoint.h	/^fork_checkpoint(struct pusha_regs * regs, void * pc,$/;"	p	signature:(struct pusha_regs * regs, void * pc, void * stack_top, struct timeval * ptv)
free_aux_mem	snitchaser_tpd.c	/^free_aux_mem(struct thread_private_data * tpd)$/;"	f	signature:(struct thread_private_data * tpd)
free_aux_mem	snitchaser_tpd.h	/^free_aux_mem(struct thread_private_data * tpd);$/;"	p	signature:(struct thread_private_data * tpd)
free_obj_buk	mm.c	/^free_obj_buk(struct obj_buk_head * buk)$/;"	f	file:	signature:(struct obj_buk_head * buk)
fs_val	tls.h	/^	tls_asm_slot_t fs_val;$/;"	m	struct:tls_desc	access:public
fsmblks	malloc.c	/^  MALLINFO_FIELD_TYPE fsmblks;  \/* always 0 *\/$/;"	m	struct:mallinfo	file:	access:public
futex_wait	futex.c	/^futex_wait(void * addr, int val)$/;"	f	signature:(void * addr, int val)
futex_wait	futex.h	/^futex_wait(void * addr, int val);$/;"	p	signature:(void * addr, int val)
futex_wake	futex.c	/^futex_wake(void * addr, int nr)$/;"	f	signature:(void * addr, int nr)
futex_wake	futex.h	/^futex_wake(void * addr, int nr);$/;"	p	signature:(void * addr, int nr)
fx	arch_checkpoint.c	/^	struct i387_fxsave_struct fx;$/;"	m	struct:arch_cpuinfo_s	typeref:struct:arch_cpuinfo_s::i387_fxsave_struct	file:	access:public
fxmark	arch_checkpoint.c	/^	enum arch_ckpt_mark fxmark;$/;"	m	struct:arch_cpuinfo_s	typeref:enum:arch_cpuinfo_s::arch_ckpt_mark	file:	access:public
fxsz	arch_checkpoint.c	/^	size_t fxsz;$/;"	m	struct:arch_cpuinfo_s	file:	access:public
get_aval_size	checkpoint.c	/^get_aval_size(const char * fn, uint64_t offset, size_t desire_size)$/;"	f	file:	signature:(const char * fn, uint64_t offset, size_t desire_size)
get_ckpt_cpuinfo	arch_checkpoint.c	/^get_ckpt_cpuinfo(void * buffer, size_t sz,$/;"	f	signature:(void * buffer, size_t sz, struct pusha_regs * regs, void * eip)
get_ckpt_cpuinfo	arch_checkpoint.h	/^get_ckpt_cpuinfo(void * buffer, size_t sz,$/;"	p	signature:(void * buffer, size_t sz, struct pusha_regs * regs, void * eip)
get_eol	proc.c	/^get_eol(char * ptr, char * end)$/;"	f	file:	signature:(char * ptr, char * end)
get_foot	malloc.c	2145;"	d	file:
get_map_prot	elf.c	188;"	d	file:
get_mstate_for	malloc.c	2925;"	d	file:
get_self_bb	bigbuffer.c	/^get_self_bb(void)$/;"	f	file:	signature:(void)
get_self_tls_desc	tls.h	/^get_self_tls_desc(void)$/;"	f	signature:(void)
get_self_tpd	snitchaser_tpd.h	/^get_self_tpd(void)$/;"	f	signature:(void)
get_this_bb	logger.c	/^get_this_bb(struct logger_tpd_stub * l)$/;"	f	file:	signature:(struct logger_tpd_stub * l)
get_tls_desc	tls.h	36;"	d
get_tls_info	arch_checkpoint.c	/^get_tls_info(void * buffer, size_t sz)$/;"	f	signature:(void * buffer, size_t sz)
get_tls_info	arch_checkpoint.h	/^get_tls_info(void * buffer, size_t sz);$/;"	p	signature:(void * buffer, size_t sz)
get_tls_topmost_addr	tls.h	34;"	d
get_total_map_sz	elf.c	/^get_total_map_sz(struct elf_phdr * phdrs, int nr_phdrs, int * first)$/;"	f	file:	signature:(struct elf_phdr * phdrs, int nr_phdrs, int * first)
get_tpd	snitchaser_tpd.h	/^get_tpd(struct tls_desc * td)$/;"	f	signature:(struct tls_desc * td)
get_vsyscall_entry	interp_main.c	/^get_vsyscall_entry(const char **envp)$/;"	f	signature:(const char **envp)
get_vsyscall_entry	interp_main.h	/^get_vsyscall_entry(const char **envp);$/;"	p	signature:(const char **envp)
getpagesize	malloc.c	/^       extern size_t getpagesize();$/;"	p	file:
gm	malloc.c	2494;"	d	file:
granularity	malloc.c	/^  size_t granularity;$/;"	m	struct:malloc_params	file:	access:public
granularity_align	malloc.c	2526;"	d	file:
has_segment_link	malloc.c	/^static int has_segment_link(mstate m, msegmentptr ss) {$/;"	f	file:	signature:(mstate m, msegmentptr ss)
have_imark	checkpoint.c	/^	bool_t have_imark;$/;"	m	struct:sg	file:	access:public
hblkhd	malloc.c	/^  MALLINFO_FIELD_TYPE hblkhd;   \/* space in mmapped regions *\/$/;"	m	struct:mallinfo	file:	access:public
hblks	malloc.c	/^  MALLINFO_FIELD_TYPE hblks;    \/* always 0 *\/$/;"	m	struct:mallinfo	file:	access:public
head	malloc.c	/^  size_t                    head;$/;"	m	struct:malloc_tree_chunk	file:	access:public
head	malloc.c	/^  size_t               head;       \/* Size and inuse bits. *\/$/;"	m	struct:malloc_chunk	file:	access:public
ialloc	malloc.c	/^static void** ialloc(mstate m,$/;"	f	file:	signature:(mstate m, size_t n_elements, size_t* sizes, int opts, void* chunks[])
idx2bit	malloc.c	2769;"	d	file:
imark	checkpoint.c	/^	uint32_t imark;$/;"	m	struct:sg	file:	access:public
index	malloc.c	/^  bindex_t                  index;$/;"	m	struct:malloc_tree_chunk	file:	access:public
init_auxv_info	startup_stack.c	/^init_auxv_info(void)$/;"	f	file:	signature:(void)
init_bigbuffer	bigbuffer.c	/^init_bigbuffer(struct bigbuffer * bb)$/;"	f	signature:(struct bigbuffer * bb)
init_bigbuffer	bigbuffer.h	/^init_bigbuffer(struct bigbuffer * bb);$/;"	p	signature:(struct bigbuffer * bb)
init_bins	malloc.c	/^static void init_bins(mstate m) {$/;"	f	file:	signature:(mstate m)
init_logger	logger.c	/^init_logger(struct logger_tpd_stub * l, struct timeval * ptv, int pid, int tid)$/;"	f	signature:(struct logger_tpd_stub * l, struct timeval * ptv, int pid, int tid)
init_logger	logger.h	/^init_logger(struct logger_tpd_stub * l, struct timeval * ptv, int pid, int tid);$/;"	p	signature:(struct logger_tpd_stub * l, struct timeval * ptv, int pid, int tid)
init_malloc_global_mutex	malloc.c	/^static void init_malloc_global_mutex() {$/;"	f	file:
init_map_handler	proc.c	/^init_map_handler(struct proc_mem_handler_t * handler,$/;"	f	signature:(struct proc_mem_handler_t * handler, char * data, size_t size)
init_map_handler	proc.h	/^init_map_handler(struct proc_mem_handler_t * handler,$/;"	p	signature:(struct proc_mem_handler_t * handler, char * data, size_t size)
init_mm_obj	mm.c	/^init_mm_obj(struct obj_mm_tpd_stub * objmm, bool_t executable)$/;"	f	signature:(struct obj_mm_tpd_stub * objmm, bool_t executable)
init_mm_obj	mm.h	/^init_mm_obj(struct obj_mm_tpd_stub * obj_mm_tls, bool_t executable);$/;"	p	signature:(struct obj_mm_tpd_stub * obj_mm_tls, bool_t executable)
init_mparams	malloc.c	/^static int init_mparams(void) {$/;"	f	file:	signature:(void)
init_self_bigbuffer	bigbuffer.c	/^init_self_bigbuffer(void)$/;"	f	signature:(void)
init_self_bigbuffer	bigbuffer.h	/^init_self_bigbuffer(void);$/;"	p	signature:(void)
init_self_logger	logger.h	/^init_self_logger(struct timeval * ptv, int pid, int tid)$/;"	f	signature:(struct timeval * ptv, int pid, int tid)
init_self_mm_obj	mm.c	/^init_self_mm_obj(bool_t executable)$/;"	f	signature:(bool_t executable)
init_self_mm_obj	mm.h	/^init_self_mm_obj(bool_t executable);$/;"	p	signature:(bool_t executable)
init_top	malloc.c	/^static void init_top(mstate m, mchunkptr p, size_t psize) {$/;"	f	file:	signature:(mstate m, mchunkptr p, size_t psize)
init_user_mstate	malloc.c	/^static mstate init_user_mstate(char* tbase, size_t tsize) {$/;"	f	file:	signature:(char* tbase, size_t tsize)
inode	proc.h	/^	uint32_t inode;$/;"	m	struct:proc_maps_entry_t	access:public
insert_chunk	malloc.c	3624;"	d	file:
insert_large_chunk	malloc.c	3483;"	d	file:
insert_small_chunk	malloc.c	3410;"	d	file:
int_conf	env_conf.c	34;"	d	file:
int_conf	env_conf.c	38;"	d	file:
int_conf	env_conf.c	68;"	d	file:
int_conf	env_conf.c	81;"	d	file:
int_conf	env_conf.h	15;"	d
int_conf	env_conf.h	19;"	d
interlockedcompareexchange	malloc.c	1360;"	d	file:
interlockedexchange	malloc.c	1361;"	d	file:
internal_free	malloc.c	3637;"	d	file:
internal_free	malloc.c	3642;"	d	file:
internal_free	malloc.c	3646;"	d	file:
internal_mallinfo	malloc.c	/^static struct mallinfo internal_mallinfo(mstate m) {$/;"	f	file:	signature:(mstate m)
internal_malloc	malloc.c	3636;"	d	file:
internal_malloc	malloc.c	3640;"	d	file:
internal_malloc	malloc.c	3645;"	d	file:
internal_malloc_stats	malloc.c	/^static void internal_malloc_stats(mstate m) {$/;"	f	file:	signature:(mstate m)
internal_memalign	malloc.c	/^static void* internal_memalign(mstate m, size_t alignment, size_t bytes) {$/;"	f	file:	signature:(mstate m, size_t alignment, size_t bytes)
internal_realloc	malloc.c	/^static void* internal_realloc(mstate m, void* oldmem, size_t bytes) {$/;"	f	file:	signature:(mstate m, void* oldmem, size_t bytes)
interp_startup_stack	interp_main.h	/^struct interp_startup_stack {$/;"	s
interp_startup_stack::saved_regs	interp_main.h	/^	volatile struct pusha_regs saved_regs;$/;"	m	struct:interp_startup_stack	typeref:struct:interp_startup_stack::pusha_regs	access:public
interp_startup_stack::stack_top	interp_main.h	/^	void * volatile stack_top;$/;"	m	struct:interp_startup_stack	access:public
is_aligned	malloc.c	1454;"	d	file:
is_block_sigkill_replace	signal.h	43;"	d
is_extern_segment	malloc.c	2342;"	d	file:
is_global	malloc.c	2495;"	d	file:
is_granularity_aligned	malloc.c	2543;"	d	file:
is_initialized	malloc.c	2499;"	d	file:
is_inuse	malloc.c	2126;"	d	file:
is_mmapped	malloc.c	2127;"	d	file:
is_mmapped_segment	malloc.c	2341;"	d	file:
is_page_aligned	malloc.c	2541;"	d	file:
is_posted	syscall_tpd.h	/^	bool_t is_posted;$/;"	m	struct:syscall_tpd_stub	access:public
is_small	malloc.c	2677;"	d	file:
is_valid_page	processor.h	29;"	d
is_valid_ptr	processor.h	30;"	d
keepcost	malloc.c	/^  MALLINFO_FIELD_TYPE keepcost; \/* releasable (via malloc_trim) space *\/$/;"	m	struct:mallinfo	file:	access:public
l	malloc.c	/^  volatile long l;$/;"	m	struct:win32_mlock_t	file:	access:public
l	malloc.c	/^  volatile unsigned int l;$/;"	m	struct:pthread_mlock_t	file:	access:public
least_addr	malloc.c	/^  char*      least_addr;$/;"	m	struct:malloc_state	file:	access:public
least_bit	malloc.c	2781;"	d	file:
left_bits	malloc.c	2784;"	d	file:
leftmost_child	malloc.c	2275;"	d	file:
leftshift_for_tree_index	malloc.c	2756;"	d	file:
length	checkpoint.c	/^	size_t length;$/;"	m	struct:sg	file:	access:public
list	mm.h	/^	struct list_head list;$/;"	m	struct:obj_buk_head	typeref:struct:obj_buk_head::list_head	access:public
list	tls.h	/^	struct list_head list;$/;"	m	struct:tls_desc	typeref:struct:tls_desc::list_head	access:public
load_elf	elf.c	/^load_elf(const char * fn, void ** p_load_bias,$/;"	f	signature:(const char * fn, void ** p_load_bias, struct elf_phdr ** pp_phdrs, int * p_nr_phdrs, bool_t * p_need_interp)
load_elf	elf.h	/^load_elf(const char * fn, void ** p_load_bias,$/;"	p	signature:(const char * fn, void ** p_load_bias, struct elf_phdr ** pp_phdrs, int * p_nr_phdrs, bool_t * p_need_interp)
load_exec	interp_main.c	/^load_exec(struct interp_startup_stack * startup_stack, void ** p_entry)$/;"	f	file:	signature:(struct interp_startup_stack * startup_stack, void ** p_entry)
load_phdrs	elf.c	/^load_phdrs(int fd, struct elf_phdr * dest, struct elfhdr * h)$/;"	f	file:	signature:(int fd, struct elf_phdr * dest, struct elfhdr * h)
load_real_interp	interp_main.c	/^load_real_interp(struct interp_startup_stack * startup_stack, void ** p_entry)$/;"	f	file:	signature:(struct interp_startup_stack * startup_stack, void ** p_entry)
loadsr	processor.c	140;"	d	file:
log_flush_mutex	logger_tpd.h	/^	struct xmutex log_flush_mutex;$/;"	m	struct:logger_tpd_stub	typeref:struct:logger_tpd_stub::xmutex	access:public
log_fn	logger_tpd.h	/^	char log_fn[MAX_OUTPUT_FN_LEN];$/;"	m	struct:logger_tpd_stub	access:public
logger_fd	snitchaser_main.c	/^int SCOPE logger_fd = 0;$/;"	v
logger_stub	snitchaser_tpd.h	/^	struct logger_tpd_stub logger_stub;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::logger_tpd_stub	access:public
logger_sz	snitchaser_main.c	/^uint32_t SCOPE logger_sz = 0;$/;"	v
logger_tpd_stub	logger_tpd.h	/^struct logger_tpd_stub {$/;"	s
logger_tpd_stub::asm_curr_ptr	logger_tpd.h	/^	uintptr_t asm_curr_ptr;$/;"	m	struct:logger_tpd_stub	access:public
logger_tpd_stub::asm_end_ptr	logger_tpd.h	/^	uintptr_t asm_end_ptr;$/;"	m	struct:logger_tpd_stub	access:public
logger_tpd_stub::end_ptr	logger_tpd.h	/^	void * end_ptr;$/;"	m	struct:logger_tpd_stub	access:public
logger_tpd_stub::log_flush_mutex	logger_tpd.h	/^	struct xmutex log_flush_mutex;$/;"	m	struct:logger_tpd_stub	typeref:struct:logger_tpd_stub::xmutex	access:public
logger_tpd_stub::log_fn	logger_tpd.h	/^	char log_fn[MAX_OUTPUT_FN_LEN];$/;"	m	struct:logger_tpd_stub	access:public
logger_tpd_stub::start_ptr	logger_tpd.h	/^	void * start_ptr;$/;"	m	struct:logger_tpd_stub	access:public
logger_tpd_stub::this_bigbuffer	logger_tpd.h	/^	struct bigbuffer * this_bigbuffer;$/;"	m	struct:logger_tpd_stub	typeref:struct:logger_tpd_stub::bigbuffer	access:public
magic	checkpoint.h	/^	char magic[sizeof(CKPT_VERSION_STRING)];$/;"	m	struct:checkpoint_head	access:public
magic	malloc.c	/^  size_t     magic;$/;"	m	struct:malloc_state	file:	access:public
magic	malloc.c	/^  volatile size_t magic;$/;"	m	struct:malloc_params	file:	access:public
major_dev	proc.h	/^	uint32_t major_dev;$/;"	m	struct:proc_maps_entry_t	access:public
mallinfo	malloc.c	/^struct mallinfo {$/;"	s	file:
mallinfo::arena	malloc.c	/^  MALLINFO_FIELD_TYPE arena;    \/* non-mmapped space allocated from system *\/$/;"	m	struct:mallinfo	file:	access:public
mallinfo::fordblks	malloc.c	/^  MALLINFO_FIELD_TYPE fordblks; \/* total free space *\/$/;"	m	struct:mallinfo	file:	access:public
mallinfo::fsmblks	malloc.c	/^  MALLINFO_FIELD_TYPE fsmblks;  \/* always 0 *\/$/;"	m	struct:mallinfo	file:	access:public
mallinfo::hblkhd	malloc.c	/^  MALLINFO_FIELD_TYPE hblkhd;   \/* space in mmapped regions *\/$/;"	m	struct:mallinfo	file:	access:public
mallinfo::hblks	malloc.c	/^  MALLINFO_FIELD_TYPE hblks;    \/* always 0 *\/$/;"	m	struct:mallinfo	file:	access:public
mallinfo::keepcost	malloc.c	/^  MALLINFO_FIELD_TYPE keepcost; \/* releasable (via malloc_trim) space *\/$/;"	m	struct:mallinfo	file:	access:public
mallinfo::ordblks	malloc.c	/^  MALLINFO_FIELD_TYPE ordblks;  \/* number of free chunks *\/$/;"	m	struct:mallinfo	file:	access:public
mallinfo::smblks	malloc.c	/^  MALLINFO_FIELD_TYPE smblks;   \/* always 0 *\/$/;"	m	struct:mallinfo	file:	access:public
mallinfo::uordblks	malloc.c	/^  MALLINFO_FIELD_TYPE uordblks; \/* total allocated space *\/$/;"	m	struct:mallinfo	file:	access:public
mallinfo::usmblks	malloc.c	/^  MALLINFO_FIELD_TYPE usmblks;  \/* maximum total allocated space *\/$/;"	m	struct:mallinfo	file:	access:public
malloc_chunk	malloc.c	/^struct malloc_chunk {$/;"	s	file:
malloc_chunk::bk	malloc.c	/^  struct malloc_chunk* bk;$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:	access:public
malloc_chunk::fd	malloc.c	/^  struct malloc_chunk* fd;         \/* double links -- used only if free. *\/$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:	access:public
malloc_chunk::head	malloc.c	/^  size_t               head;       \/* Size and inuse bits. *\/$/;"	m	struct:malloc_chunk	file:	access:public
malloc_chunk::prev_foot	malloc.c	/^  size_t               prev_foot;  \/* Size of previous chunk (if free).  *\/$/;"	m	struct:malloc_chunk	file:	access:public
malloc_corruption_error_count	malloc.c	/^int malloc_corruption_error_count;$/;"	v
malloc_getpagesize	malloc.c	1392;"	d	file:
malloc_getpagesize	malloc.c	1396;"	d	file:
malloc_getpagesize	malloc.c	1399;"	d	file:
malloc_getpagesize	malloc.c	1405;"	d	file:
malloc_getpagesize	malloc.c	1409;"	d	file:
malloc_getpagesize	malloc.c	1411;"	d	file:
malloc_getpagesize	malloc.c	1415;"	d	file:
malloc_getpagesize	malloc.c	1418;"	d	file:
malloc_getpagesize	malloc.c	1420;"	d	file:
malloc_global_mutex	malloc.c	/^static MLOCK_T malloc_global_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
malloc_global_mutex	malloc.c	/^static MLOCK_T malloc_global_mutex = { 0, 0, 0};$/;"	v	file:
malloc_global_mutex	malloc.c	/^static MLOCK_T malloc_global_mutex;$/;"	v	file:
malloc_global_mutex_status	malloc.c	/^static volatile long malloc_global_mutex_status;$/;"	v	file:
malloc_params	malloc.c	/^struct malloc_params {$/;"	s	file:
malloc_params::default_mflags	malloc.c	/^  flag_t default_mflags;$/;"	m	struct:malloc_params	file:	access:public
malloc_params::granularity	malloc.c	/^  size_t granularity;$/;"	m	struct:malloc_params	file:	access:public
malloc_params::magic	malloc.c	/^  volatile size_t magic;$/;"	m	struct:malloc_params	file:	access:public
malloc_params::mmap_threshold	malloc.c	/^  size_t mmap_threshold;$/;"	m	struct:malloc_params	file:	access:public
malloc_params::page_size	malloc.c	/^  size_t page_size;$/;"	m	struct:malloc_params	file:	access:public
malloc_params::trim_threshold	malloc.c	/^  size_t trim_threshold;$/;"	m	struct:malloc_params	file:	access:public
malloc_segment	malloc.c	/^struct malloc_segment {$/;"	s	file:
malloc_segment::base	malloc.c	/^  char*        base;             \/* base address *\/$/;"	m	struct:malloc_segment	file:	access:public
malloc_segment::next	malloc.c	/^  struct malloc_segment* next;   \/* ptr to next segment *\/$/;"	m	struct:malloc_segment	typeref:struct:malloc_segment::malloc_segment	file:	access:public
malloc_segment::sflags	malloc.c	/^  flag_t       sflags;           \/* mmap and extern flag *\/$/;"	m	struct:malloc_segment	file:	access:public
malloc_segment::size	malloc.c	/^  size_t       size;             \/* allocated size *\/$/;"	m	struct:malloc_segment	file:	access:public
malloc_state	malloc.c	/^struct malloc_state {$/;"	s	file:
malloc_state::dv	malloc.c	/^  mchunkptr  dv;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::dvsize	malloc.c	/^  size_t     dvsize;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::extp	malloc.c	/^  void*      extp;      \/* Unused but available for extensions *\/$/;"	m	struct:malloc_state	file:	access:public
malloc_state::exts	malloc.c	/^  size_t     exts;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::footprint	malloc.c	/^  size_t     footprint;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::least_addr	malloc.c	/^  char*      least_addr;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::magic	malloc.c	/^  size_t     magic;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::max_footprint	malloc.c	/^  size_t     max_footprint;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::mflags	malloc.c	/^  flag_t     mflags;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::mutex	malloc.c	/^  MLOCK_T    mutex;     \/* locate lock among fields that rarely change *\/$/;"	m	struct:malloc_state	file:	access:public
malloc_state::release_checks	malloc.c	/^  size_t     release_checks;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::seg	malloc.c	/^  msegment   seg;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::smallbins	malloc.c	/^  mchunkptr  smallbins[(NSMALLBINS+1)*2];$/;"	m	struct:malloc_state	file:	access:public
malloc_state::smallmap	malloc.c	/^  binmap_t   smallmap;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::top	malloc.c	/^  mchunkptr  top;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::topsize	malloc.c	/^  size_t     topsize;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::treebins	malloc.c	/^  tbinptr    treebins[NTREEBINS];$/;"	m	struct:malloc_state	file:	access:public
malloc_state::treemap	malloc.c	/^  binmap_t   treemap;$/;"	m	struct:malloc_state	file:	access:public
malloc_state::trim_check	malloc.c	/^  size_t     trim_check;$/;"	m	struct:malloc_state	file:	access:public
malloc_tree_chunk	malloc.c	/^struct malloc_tree_chunk {$/;"	s	file:
malloc_tree_chunk::bk	malloc.c	/^  struct malloc_tree_chunk* bk;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:	access:public
malloc_tree_chunk::child	malloc.c	/^  struct malloc_tree_chunk* child[2];$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:	access:public
malloc_tree_chunk::fd	malloc.c	/^  struct malloc_tree_chunk* fd;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:	access:public
malloc_tree_chunk::head	malloc.c	/^  size_t                    head;$/;"	m	struct:malloc_tree_chunk	file:	access:public
malloc_tree_chunk::index	malloc.c	/^  bindex_t                  index;$/;"	m	struct:malloc_tree_chunk	file:	access:public
malloc_tree_chunk::parent	malloc.c	/^  struct malloc_tree_chunk* parent;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:	access:public
malloc_tree_chunk::prev_foot	malloc.c	/^  size_t                    prev_foot;$/;"	m	struct:malloc_tree_chunk	file:	access:public
map_data	proc.h	/^	char * map_data;$/;"	m	struct:proc_mem_handler_t	access:public
map_end	proc.h	/^	char * map_end;$/;"	m	struct:proc_mem_handler_t	access:public
map_file_info	checkpoint.h	/^struct map_file_info {$/;"	s
map_file_info::ckpt_sz	checkpoint.h	/^	size_t ckpt_sz;$/;"	m	struct:map_file_info	access:public
map_file_info::end	checkpoint.h	/^	uintptr_t end;$/;"	m	struct:map_file_info	access:public
map_file_info::offset	checkpoint.h	/^	uint64_t offset;$/;"	m	struct:map_file_info	access:public
map_file_info::prot	checkpoint.h	/^	uint32_t prot;$/;"	m	struct:map_file_info	access:public
map_file_info::space_sz	checkpoint.h	/^	size_t space_sz;$/;"	m	struct:map_file_info	access:public
map_file_info::start	checkpoint.h	/^	uintptr_t start;$/;"	m	struct:map_file_info	access:public
map_first	elf.c	/^map_first(int fd, struct elf_phdr * first_phdr,$/;"	f	file:	signature:(int fd, struct elf_phdr * first_phdr, size_t total_map_sz, void ** p_bias, bool_t fixed)
map_region	elf.c	/^map_region(int fd, struct elf_phdr * phdr, void * load_bias)$/;"	f	file:	signature:(int fd, struct elf_phdr * phdr, void * load_bias)
mark_inuse_foot	malloc.c	2901;"	d	file:
mark_inuse_foot	malloc.c	2922;"	d	file:
mark_smallmap	malloc.c	2772;"	d	file:
mark_treemap	malloc.c	2776;"	d	file:
max_footprint	malloc.c	/^  size_t     max_footprint;$/;"	m	struct:malloc_state	file:	access:public
mchunk	malloc.c	/^typedef struct malloc_chunk  mchunk;$/;"	t	typeref:struct:malloc_chunk	file:
mchunkptr	malloc.c	/^typedef struct malloc_chunk* mchunkptr;$/;"	t	typeref:struct:malloc_chunk	file:
mem2chunk	malloc.c	2087;"	d	file:
mflags	malloc.c	/^  flag_t     mflags;$/;"	m	struct:malloc_state	file:	access:public
minor_dev	proc.h	/^	uint32_t minor_dev;$/;"	m	struct:proc_maps_entry_t	access:public
minsize_for_tree_index	malloc.c	2761;"	d	file:
mm_stub	snitchaser_tpd.h	/^	struct obj_mm_tpd_stub mm_stub;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::obj_mm_tpd_stub	access:public
mmap_align	malloc.c	2533;"	d	file:
mmap_align	malloc.c	2535;"	d	file:
mmap_alloc	malloc.c	/^static void* mmap_alloc(mstate m, size_t nb) {$/;"	f	file:	signature:(mstate m, size_t nb)
mmap_resize	malloc.c	/^static mchunkptr mmap_resize(mstate m, mchunkptr oldp, size_t nb) {$/;"	f	file:	signature:(mstate m, mchunkptr oldp, size_t nb)
mmap_threshold	malloc.c	/^  size_t mmap_threshold;$/;"	m	struct:malloc_params	file:	access:public
mparams	malloc.c	/^static struct malloc_params mparams;$/;"	v	typeref:struct:malloc_params	file:
msegment	malloc.c	/^typedef struct malloc_segment  msegment;$/;"	t	typeref:struct:malloc_segment	file:
msegmentptr	malloc.c	/^typedef struct malloc_segment* msegmentptr;$/;"	t	typeref:struct:malloc_segment	file:
mspace	malloc.c	/^typedef void* mspace;$/;"	t	file:
mspace_calloc	malloc.c	/^void* mspace_calloc(mspace msp, size_t n_elements, size_t elem_size) {$/;"	f	signature:(mspace msp, size_t n_elements, size_t elem_size)
mspace_calloc	malloc.c	/^void* mspace_calloc(mspace msp, size_t n_elements, size_t elem_size);$/;"	p	file:	signature:(mspace msp, size_t n_elements, size_t elem_size)
mspace_footprint	malloc.c	/^size_t mspace_footprint(mspace msp) {$/;"	f	signature:(mspace msp)
mspace_footprint	malloc.c	/^size_t mspace_footprint(mspace msp);$/;"	p	file:	signature:(mspace msp)
mspace_free	malloc.c	/^void mspace_free(mspace msp, void* mem) {$/;"	f	signature:(mspace msp, void* mem)
mspace_free	malloc.c	/^void mspace_free(mspace msp, void* mem);$/;"	p	file:	signature:(mspace msp, void* mem)
mspace_independent_calloc	malloc.c	/^void** mspace_independent_calloc(mspace msp, size_t n_elements,$/;"	f	signature:(mspace msp, size_t n_elements, size_t elem_size, void* chunks[])
mspace_independent_calloc	malloc.c	/^void** mspace_independent_calloc(mspace msp, size_t n_elements,$/;"	p	file:	signature:(mspace msp, size_t n_elements, size_t elem_size, void* chunks[])
mspace_independent_comalloc	malloc.c	/^void** mspace_independent_comalloc(mspace msp, size_t n_elements,$/;"	f	signature:(mspace msp, size_t n_elements, size_t sizes[], void* chunks[])
mspace_independent_comalloc	malloc.c	/^void** mspace_independent_comalloc(mspace msp, size_t n_elements,$/;"	p	file:	signature:(mspace msp, size_t n_elements, size_t sizes[], void* chunks[])
mspace_mallinfo	malloc.c	/^struct mallinfo mspace_mallinfo(mspace msp) {$/;"	f	signature:(mspace msp)
mspace_mallinfo	malloc.c	/^struct mallinfo mspace_mallinfo(mspace msp);$/;"	p	file:	signature:(mspace msp)
mspace_malloc	malloc.c	/^void* mspace_malloc(mspace msp, size_t bytes) {$/;"	f	signature:(mspace msp, size_t bytes)
mspace_malloc	malloc.c	/^void* mspace_malloc(mspace msp, size_t bytes);$/;"	p	file:	signature:(mspace msp, size_t bytes)
mspace_malloc_stats	malloc.c	/^void mspace_malloc_stats(mspace msp) {$/;"	f	signature:(mspace msp)
mspace_malloc_stats	malloc.c	/^void mspace_malloc_stats(mspace msp);$/;"	p	file:	signature:(mspace msp)
mspace_mallopt	malloc.c	/^int mspace_mallopt(int param_number, int value) {$/;"	f	signature:(int param_number, int value)
mspace_mallopt	malloc.c	/^int mspace_mallopt(int, int);$/;"	p	file:	signature:(int, int)
mspace_max_footprint	malloc.c	/^size_t mspace_max_footprint(mspace msp) {$/;"	f	signature:(mspace msp)
mspace_max_footprint	malloc.c	/^size_t mspace_max_footprint(mspace msp);$/;"	p	file:	signature:(mspace msp)
mspace_memalign	malloc.c	/^void* mspace_memalign(mspace msp, size_t alignment, size_t bytes) {$/;"	f	signature:(mspace msp, size_t alignment, size_t bytes)
mspace_memalign	malloc.c	/^void* mspace_memalign(mspace msp, size_t alignment, size_t bytes);$/;"	p	file:	signature:(mspace msp, size_t alignment, size_t bytes)
mspace_realloc	malloc.c	/^void* mspace_realloc(mspace msp, void* mem, size_t newsize);$/;"	p	file:	signature:(mspace msp, void* mem, size_t newsize)
mspace_realloc	malloc.c	/^void* mspace_realloc(mspace msp, void* oldmem, size_t bytes) {$/;"	f	signature:(mspace msp, void* oldmem, size_t bytes)
mspace_track_large_chunks	malloc.c	/^int mspace_track_large_chunks(mspace msp, int enable) {$/;"	f	signature:(mspace msp, int enable)
mspace_track_large_chunks	malloc.c	/^int mspace_track_large_chunks(mspace msp, int enable);$/;"	p	file:	signature:(mspace msp, int enable)
mspace_trim	malloc.c	/^int mspace_trim(mspace msp, size_t pad) {$/;"	f	signature:(mspace msp, size_t pad)
mspace_trim	malloc.c	/^int mspace_trim(mspace msp, size_t pad);$/;"	p	file:	signature:(mspace msp, size_t pad)
mspace_usable_size	malloc.c	/^  size_t mspace_usable_size(void* mem);$/;"	p	file:	signature:(void* mem)
mspace_usable_size	malloc.c	/^size_t mspace_usable_size(void* mem) {$/;"	f	signature:(void* mem)
mstate	malloc.c	/^typedef struct malloc_state*    mstate;$/;"	t	typeref:struct:malloc_state	file:
mutex	malloc.c	/^  MLOCK_T    mutex;     \/* locate lock among fields that rarely change *\/$/;"	m	struct:malloc_state	file:	access:public
next	malloc.c	/^  struct malloc_segment* next;   \/* ptr to next segment *\/$/;"	m	struct:malloc_segment	typeref:struct:malloc_segment::malloc_segment	file:	access:public
next_chunk	malloc.c	2138;"	d	file:
next_pinuse	malloc.c	2142;"	d	file:
next_ptr	proc.c	/^next_ptr(char * ptr, char * end)$/;"	f	file:	signature:(char * ptr, char * end)
nr	tls.h	/^	int nr;$/;"	m	struct:tls_desc	access:public
obj_buk_head	mm.h	/^struct obj_buk_head {$/;"	s
obj_buk_head::aval_size	mm.h	/^	size_t aval_size;$/;"	m	struct:obj_buk_head	access:public
obj_buk_head::buk_addr	mm.h	/^	void * buk_addr;$/;"	m	struct:obj_buk_head	access:public
obj_buk_head::buk_end	mm.h	/^	void * buk_end;$/;"	m	struct:obj_buk_head	access:public
obj_buk_head::cur_ptr	mm.h	/^	void * cur_ptr;$/;"	m	struct:obj_buk_head	access:public
obj_buk_head::list	mm.h	/^	struct list_head list;$/;"	m	struct:obj_buk_head	typeref:struct:obj_buk_head::list_head	access:public
obj_buk_head::total_size	mm.h	/^	size_t total_size;$/;"	m	struct:obj_buk_head	access:public
obj_mm_tpd_stub	mm.h	/^struct obj_mm_tpd_stub {$/;"	s
obj_mm_tpd_stub::buk_list	mm.h	/^	struct list_head buk_list;$/;"	m	struct:obj_mm_tpd_stub	typeref:struct:obj_mm_tpd_stub::list_head	access:public
obj_mm_tpd_stub::cur_buk	mm.h	/^	struct obj_buk_head * cur_buk;$/;"	m	struct:obj_mm_tpd_stub	typeref:struct:obj_mm_tpd_stub::obj_buk_head	access:public
obj_mm_tpd_stub::executable	mm.h	/^	bool_t executable;$/;"	m	struct:obj_mm_tpd_stub	access:public
offset	checkpoint.h	/^	uint64_t offset;$/;"	m	struct:map_file_info	access:public
offset	proc.h	/^	uint64_t offset;$/;"	m	struct:proc_maps_entry_t	access:public
ok_address	malloc.c	2863;"	d	file:
ok_address	malloc.c	2872;"	d	file:
ok_inuse	malloc.c	2867;"	d	file:
ok_inuse	malloc.c	2874;"	d	file:
ok_magic	malloc.c	2880;"	d	file:
ok_magic	malloc.c	2882;"	d	file:
ok_next	malloc.c	2865;"	d	file:
ok_next	malloc.c	2873;"	d	file:
ok_pinuse	malloc.c	2869;"	d	file:
ok_pinuse	malloc.c	2875;"	d	file:
old_prot	arch_user_entry.c	/^static uint32_t old_prot = 0;$/;"	v	file:
old_stack_top	snitchaser_tpd.h	/^	void * old_stack_top;$/;"	m	struct:thread_private_data	access:public
open_elf_file	elf.c	/^open_elf_file(const char * fn, struct elfhdr * hdr)$/;"	f	file:	signature:(const char * fn, struct elfhdr * hdr)
ordblks	malloc.c	/^  MALLINFO_FIELD_TYPE ordblks;  \/* number of free chunks *\/$/;"	m	struct:mallinfo	file:	access:public
ori_sz	compression.h	/^	size_t ori_sz;$/;"	m	struct:comp_block_head	access:public
overhead_for	malloc.c	2157;"	d	file:
p_argc	startup_stack.h	/^	long int * p_argc;$/;"	m	struct:startup_stack_info	access:public
p_args	startup_stack.h	/^	const char ** p_args;$/;"	m	struct:startup_stack_info	access:public
p_auxvs	startup_stack.h	/^	long int * p_auxvs;$/;"	m	struct:startup_stack_info	access:public
p_base	startup_stack.h	/^	void ** p_base;$/;"	m	struct:auxv_info	access:public
p_envs	startup_stack.h	/^	const char ** p_envs;$/;"	m	struct:startup_stack_info	access:public
p_execfn	startup_stack.h	/^	const char ** p_execfn;$/;"	m	struct:auxv_info	access:public
p_nr_user_phdrs	startup_stack.h	/^	int * p_nr_user_phdrs;$/;"	m	struct:auxv_info	access:public
p_sysinfo	startup_stack.h	/^	void ** p_sysinfo;$/;"	m	struct:auxv_info	access:public
p_user_entry	startup_stack.h	/^	void ** p_user_entry;$/;"	m	struct:auxv_info	access:public
pad_request	malloc.c	2096;"	d	file:
page_align	malloc.c	2522;"	d	file:
page_size	malloc.c	/^  size_t page_size;$/;"	m	struct:malloc_params	file:	access:public
parent	malloc.c	/^  struct malloc_tree_chunk* parent;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:	access:public
parse_line	proc.c	/^parse_line(char * ptr, size_t len)$/;"	f	file:	signature:(char * ptr, size_t len)
patch_begin	arch_user_entry.c	/^static void * patch_begin = NULL;$/;"	v	file:
patch_user_entry	user_entry.c	/^patch_user_entry(void)$/;"	f	signature:(void)
patch_user_entry	user_entry.h	/^patch_user_entry(void);$/;"	p	signature:(void)
pid	checkpoint.h	/^	uint32_t pid;$/;"	m	struct:checkpoint_head	access:public
pid	snitchaser_tpd.h	/^	pid_t pid;$/;"	m	struct:thread_private_data	access:public
pinuse	malloc.c	2125;"	d	file:
pp_sysinfo_ehdr	startup_stack.h	/^	struct elf_phdr ** pp_sysinfo_ehdr;$/;"	m	struct:auxv_info	typeref:struct:auxv_info::elf_phdr	access:public
pp_user_phdrs	startup_stack.h	/^	struct elf_phdr ** pp_user_phdrs;$/;"	m	struct:auxv_info	typeref:struct:auxv_info::elf_phdr	access:public
prepend_alloc	malloc.c	/^static void* prepend_alloc(mstate m, char* newbase, char* oldbase,$/;"	f	file:	signature:(mstate m, char* newbase, char* oldbase, size_t nb)
prev_chunk	malloc.c	2139;"	d	file:
prev_foot	malloc.c	/^  size_t                    prev_foot;$/;"	m	struct:malloc_tree_chunk	file:	access:public
prev_foot	malloc.c	/^  size_t               prev_foot;  \/* Size of previous chunk (if free).  *\/$/;"	m	struct:malloc_chunk	file:	access:public
proc_maps_entry_t	proc.h	/^struct proc_maps_entry_t{$/;"	s
proc_maps_entry_t::end	proc.h	/^	uintptr_t end;$/;"	m	struct:proc_maps_entry_t	access:public
proc_maps_entry_t::fn	proc.h	/^	char * fn;$/;"	m	struct:proc_maps_entry_t	access:public
proc_maps_entry_t::fn_len	proc.h	/^	size_t fn_len;$/;"	m	struct:proc_maps_entry_t	access:public
proc_maps_entry_t::inode	proc.h	/^	uint32_t inode;$/;"	m	struct:proc_maps_entry_t	access:public
proc_maps_entry_t::major_dev	proc.h	/^	uint32_t major_dev;$/;"	m	struct:proc_maps_entry_t	access:public
proc_maps_entry_t::minor_dev	proc.h	/^	uint32_t minor_dev;$/;"	m	struct:proc_maps_entry_t	access:public
proc_maps_entry_t::offset	proc.h	/^	uint64_t offset;$/;"	m	struct:proc_maps_entry_t	access:public
proc_maps_entry_t::prot	proc.h	/^	uint32_t prot;$/;"	m	struct:proc_maps_entry_t	access:public
proc_maps_entry_t::start	proc.h	/^	uintptr_t start;$/;"	m	struct:proc_maps_entry_t	access:public
proc_maps_entry_t::valid	proc.h	/^	bool_t valid;$/;"	m	struct:proc_maps_entry_t	access:public
proc_mem_handler_t	proc.h	/^struct proc_mem_handler_t {$/;"	s
proc_mem_handler_t::curr_ptr	proc.h	/^	char * curr_ptr;$/;"	m	struct:proc_mem_handler_t	access:public
proc_mem_handler_t::map_data	proc.h	/^	char * map_data;$/;"	m	struct:proc_mem_handler_t	access:public
proc_mem_handler_t::map_end	proc.h	/^	char * map_end;$/;"	m	struct:proc_mem_handler_t	access:public
prot	checkpoint.h	/^	uint32_t prot;$/;"	m	struct:map_file_info	access:public
prot	proc.h	/^	uint32_t prot;$/;"	m	struct:proc_maps_entry_t	access:public
pthread_acquire_lock	malloc.c	/^static FORCEINLINE int pthread_acquire_lock (MLOCK_T *sl) {$/;"	f	file:	signature:(MLOCK_T *sl)
pthread_init_lock	malloc.c	/^static int pthread_init_lock (MLOCK_T *sl) {$/;"	f	file:	signature:(MLOCK_T *sl)
pthread_mlock_t	malloc.c	/^struct pthread_mlock_t {$/;"	s	file:
pthread_mlock_t::c	malloc.c	/^  unsigned int c;$/;"	m	struct:pthread_mlock_t	file:	access:public
pthread_mlock_t::l	malloc.c	/^  volatile unsigned int l;$/;"	m	struct:pthread_mlock_t	file:	access:public
pthread_mlock_t::threadid	malloc.c	/^  pthread_t threadid;$/;"	m	struct:pthread_mlock_t	file:	access:public
pthread_mutexattr_setkind_np	malloc.c	/^extern int pthread_mutexattr_setkind_np __P ((pthread_mutexattr_t *__attr,$/;"	p	file:	signature:(pthread_mutexattr_t *__attr, int __kind)
pthread_mutexattr_settype	malloc.c	1835;"	d	file:
pthread_release_lock	malloc.c	/^static FORCEINLINE void pthread_release_lock (MLOCK_T *sl) {$/;"	f	file:	signature:(MLOCK_T *sl)
pthread_try_lock	malloc.c	/^static FORCEINLINE int pthread_try_lock (MLOCK_T *sl) {$/;"	f	file:	signature:(MLOCK_T *sl)
ptr	bigbuffer.h	/^	uintptr_t ptr;$/;"	m	struct:bigbuffer	access:public
ptr	checkpoint.c	/^	const void * ptr;$/;"	m	struct:sg	file:	access:public
pusha_regs	processor.h	/^struct pusha_regs {$/;"	s
pusha_regs::eax	processor.h	/^	uint32_t eax;$/;"	m	struct:pusha_regs	access:public
pusha_regs::ebp	processor.h	/^	uint32_t ebp;$/;"	m	struct:pusha_regs	access:public
pusha_regs::ebx	processor.h	/^	uint32_t ebx;$/;"	m	struct:pusha_regs	access:public
pusha_regs::ecx	processor.h	/^	uint32_t ecx;$/;"	m	struct:pusha_regs	access:public
pusha_regs::edi	processor.h	/^	uint32_t edi;$/;"	m	struct:pusha_regs	access:public
pusha_regs::edx	processor.h	/^	uint32_t edx;$/;"	m	struct:pusha_regs	access:public
pusha_regs::eflags	processor.h	/^	uint32_t eflags;$/;"	m	struct:pusha_regs	access:public
pusha_regs::esi	processor.h	/^	uint32_t esi;$/;"	m	struct:pusha_regs	access:public
pusha_regs::esp	processor.h	/^	uint32_t esp;$/;"	m	struct:pusha_regs	access:public
random32	processor.h	/^random32(void)$/;"	f	signature:(void)
random64	processor.h	/^random64(void)$/;"	f	signature:(void)
read_env_conf	env_conf.c	/^read_env_conf(void)$/;"	f	signature:(void)
read_env_conf	env_conf.h	/^read_env_conf(void);$/;"	p	signature:(void)
read_maps_line	proc.c	/^read_maps_line(struct proc_mem_handler_t * handler)$/;"	f	signature:(struct proc_mem_handler_t * handler)
read_maps_line	proc.h	/^read_maps_line(struct proc_mem_handler_t *handler);$/;"	p	signature:(struct proc_mem_handler_t *handler)
read_pid_procmap	proc.c	/^read_pid_procmap(int pid, struct proc_mem_handler_t * handler, void * ptr)$/;"	f	signature:(int pid, struct proc_mem_handler_t * handler, void * ptr)
read_pid_procmaps	proc.h	/^read_pid_procmaps(int pid, struct proc_mem_handler_t *handler, void *ptr);$/;"	p	signature:(int pid, struct proc_mem_handler_t *handler, void *ptr)
read_self_procmap	proc.c	/^read_self_procmap(struct proc_mem_handler_t * handler, void * ptr)$/;"	f	signature:(struct proc_mem_handler_t * handler, void * ptr)
read_self_procmaps	proc.h	/^read_self_procmaps(struct proc_mem_handler_t *handler, void *ptr);$/;"	p	signature:(struct proc_mem_handler_t *handler, void *ptr)
readsr	processor.c	75;"	d	file:
readsr	processor.c	85;"	d	file:
reexec	interp_main.c	/^reexec(void)$/;"	f	file:	signature:(void)
reexec	interp_main.c	/^static void reexec(void);$/;"	p	file:	signature:(void)
release_checks	malloc.c	/^  size_t     release_checks;$/;"	m	struct:malloc_state	file:	access:public
release_unused_segments	malloc.c	/^static size_t release_unused_segments(mstate m) {$/;"	f	file:	signature:(mstate m)
relocate_interp	elf.c	/^relocate_interp(void)$/;"	f	signature:(void)
relocate_interp	elf.h	/^relocate_interp(void);$/;"	p	signature:(void)
replace_dv	malloc.c	3469;"	d	file:
reprotect_addr_start	arch_user_entry.c	/^static void * reprotect_addr_start = NULL;$/;"	v	file:
reprotect_sz	arch_user_entry.c	/^static size_t reprotect_sz = 0;$/;"	v	file:
request2size	malloc.c	2100;"	d	file:
reset_bigbuffer_ptr	bigbuffer.h	/^reset_bigbuffer_ptr(struct bigbuffer * bb)$/;"	f	signature:(struct bigbuffer * bb)
reset_map_handler	proc.c	/^reset_map_handler(struct proc_mem_handler_t * handler)$/;"	f	signature:(struct proc_mem_handler_t * handler)
reset_map_handler	proc.h	/^reset_map_handler(struct proc_mem_handler_t * handler);$/;"	p	signature:(struct proc_mem_handler_t * handler)
reset_on_error	malloc.c	/^static void reset_on_error(mstate m) {$/;"	f	file:	signature:(mstate m)
reset_on_error	malloc.c	/^static void reset_on_error(mstate m);$/;"	p	file:	signature:(mstate m)
restore_ckpt_cpuinfo	arch_checkpoint.c	/^restore_ckpt_cpuinfo(void * buffer, size_t sz,$/;"	f	signature:(void * buffer, size_t sz, struct pusha_regs * regs, void ** p_eip)
restore_ckpt_cpuinfo	arch_checkpoint.h	/^restore_ckpt_cpuinfo(void * buffer, size_t sz,$/;"	p	signature:(void * buffer, size_t sz, struct pusha_regs * regs, void ** p_eip)
restore_i387_state	processor.c	/^restore_i387_state(struct i387_fxsave_struct * u, size_t size)$/;"	f	signature:(struct i387_fxsave_struct * u, size_t size)
restore_i387_state	processor.h	/^restore_i387_state(struct i387_fxsave_struct * u, size_t size);$/;"	p	signature:(struct i387_fxsave_struct * u, size_t size)
restore_reg_state	processor.c	/^restore_reg_state(struct user_regs_struct * u,$/;"	f	signature:(struct user_regs_struct * u, size_t size, struct pusha_regs * r, void ** p_eip)
restore_reg_state	processor.h	/^restore_reg_state(struct user_regs_struct * u,$/;"	p	signature:(struct user_regs_struct * u, size_t size, struct pusha_regs * r, void ** p_eip)
restore_signals	signal.h	/^restore_signals(sigset_t mask);$/;"	p	signature:(sigset_t mask)
restore_tls_info	arch_checkpoint.c	/^restore_tls_info(void * buffer, size_t sz)$/;"	f	signature:(void * buffer, size_t sz)
restore_tls_info	arch_checkpoint.h	/^restore_tls_info(void * buffer, size_t sz);$/;"	p	signature:(void * buffer, size_t sz)
restorsr	processor.c	131;"	d	file:
resume_addr	snitchaser_tpd.h	/^	void * resume_addr;$/;"	m	struct:thread_private_data	access:public
retaddr	snitchaser_main.h	/^	void * volatile retaddr;$/;"	m	struct:snitchaser_startup_stack	access:public
same_or_left_bits	malloc.c	2787;"	d	file:
sampling	interp_main.c	/^sampling(void)$/;"	f	file:	signature:(void)
save_i387_state	processor.c	/^save_i387_state(struct i387_fxsave_struct * u, size_t size)$/;"	f	signature:(struct i387_fxsave_struct * u, size_t size)
save_i387_state	processor.h	/^save_i387_state(struct i387_fxsave_struct * u, size_t size);$/;"	p	signature:(struct i387_fxsave_struct * u, size_t size)
save_reg_state	processor.c	/^save_reg_state(struct user_regs_struct * u,$/;"	f	signature:(struct user_regs_struct * u, size_t size, struct pusha_regs * r, void * eip)
save_reg_state	processor.h	/^save_reg_state(struct user_regs_struct * u,$/;"	p	signature:(struct user_regs_struct * u, size_t size, struct pusha_regs * r, void * eip)
saved_patch_bytes	arch_user_entry.c	/^static uint8_t saved_patch_bytes[PATCH_SZ];$/;"	v	file:
saved_regs	interp_main.h	/^	volatile struct pusha_regs saved_regs;$/;"	m	struct:interp_startup_stack	typeref:struct:interp_startup_stack::pusha_regs	access:public
saved_regs	snitchaser_main.h	/^	volatile struct pusha_regs saved_regs;$/;"	m	struct:snitchaser_startup_stack	typeref:struct:snitchaser_startup_stack::pusha_regs	access:public
saved_sigset	snitchaser_tpd.h	/^	sigset_t saved_sigset;$/;"	m	struct:thread_private_data	access:public
sbinptr	malloc.c	/^typedef struct malloc_chunk* sbinptr;  \/* The type of bins of chunks *\/$/;"	t	typeref:struct:malloc_chunk	file:
sbrk	malloc.c	/^extern void*     sbrk(ptrdiff_t);$/;"	p	file:
scan_startup_stack	startup_stack.c	/^scan_startup_stack(void * stack_top)$/;"	f	signature:(void * stack_top)
scan_startup_stack	startup_stack.h	/^scan_startup_stack(void * startup_stack_top);$/;"	p	signature:(void * startup_stack_top)
seg	malloc.c	/^  msegment   seg;$/;"	m	struct:malloc_state	file:	access:public
segment_holding	malloc.c	/^static msegmentptr segment_holding(mstate m, char* addr) {$/;"	f	file:	signature:(mstate m, char* addr)
segment_holds	malloc.c	2547;"	d	file:
set_auxvinfo	startup_stack.c	42;"	d	file:
set_auxvinfo	startup_stack.c	56;"	d	file:
set_bigbuffer_ptr	bigbuffer.h	/^set_bigbuffer_ptr(struct bigbuffer * bb, uintptr_t offset)$/;"	f	signature:(struct bigbuffer * bb, uintptr_t offset)
set_foot	malloc.c	2146;"	d	file:
set_free_with_pinuse	malloc.c	2153;"	d	file:
set_inuse	malloc.c	2906;"	d	file:
set_inuse	malloc.c	2929;"	d	file:
set_inuse_and_pinuse	malloc.c	2911;"	d	file:
set_inuse_and_pinuse	malloc.c	2934;"	d	file:
set_lock	malloc.c	2516;"	d	file:
set_maskall_sigset	signal.h	34;"	d
set_size_and_pinuse_of_free_chunk	malloc.c	2149;"	d	file:
set_size_and_pinuse_of_inuse_chunk	malloc.c	2916;"	d	file:
set_size_and_pinuse_of_inuse_chunk	malloc.c	2939;"	d	file:
set_vsyscall_entry	interp_main.c	/^set_vsyscall_entry(const char **envp, unsigned long new_entry)$/;"	f	signature:(const char **envp, unsigned long new_entry)
set_vsyscall_entry	interp_main.h	/^set_vsyscall_entry(const char **envp, unsigned long new_entry);$/;"	p	signature:(const char **envp, unsigned long new_entry)
setup_ldt	tls.c	/^setup_ldt(struct tls_desc * td, int nr)$/;"	f	signature:(struct tls_desc * td, int nr)
setup_ldt	tls.h	/^setup_ldt(struct tls_desc * td, int nr);$/;"	p	signature:(struct tls_desc * td, int nr)
setup_self_tpd	snitchaser_tpd.c	/^setup_self_tpd(void)$/;"	f	signature:(void)
setup_self_tpd	snitchaser_tpd.h	/^setup_self_tpd(void);$/;"	p	signature:(void)
setup_sglist	checkpoint.c	/^setup_sglist(struct sg * psg, bool_t haveim, uint32_t im,$/;"	f	file:	signature:(struct sg * psg, bool_t haveim, uint32_t im, const void * ptr, size_t len)
sflags	malloc.c	/^  flag_t       sflags;           \/* mmap and extern flag *\/$/;"	m	struct:malloc_segment	file:	access:public
sg	checkpoint.c	/^struct sg {$/;"	s	file:
sg::have_imark	checkpoint.c	/^	bool_t have_imark;$/;"	m	struct:sg	file:	access:public
sg::imark	checkpoint.c	/^	uint32_t imark;$/;"	m	struct:sg	file:	access:public
sg::length	checkpoint.c	/^	size_t length;$/;"	m	struct:sg	file:	access:public
sg::ptr	checkpoint.c	/^	const void * ptr;$/;"	m	struct:sg	file:	access:public
should_trim	malloc.c	2573;"	d	file:
should_trim	malloc.c	2575;"	d	file:
size	malloc.c	/^  size_t       size;             \/* allocated size *\/$/;"	m	struct:malloc_segment	file:	access:public
size	tls.h	/^	size_t size;$/;"	m	struct:tls_desc	access:public
skip_spaces_and_eol	proc.c	/^skip_spaces_and_eol(char * ptr, char * end)$/;"	f	file:	signature:(char * ptr, char * end)
small_index	malloc.c	2678;"	d	file:
small_index2size	malloc.c	2679;"	d	file:
smallbin_at	malloc.c	2683;"	d	file:
smallbins	malloc.c	/^  mchunkptr  smallbins[(NSMALLBINS+1)*2];$/;"	m	struct:malloc_state	file:	access:public
smallmap	malloc.c	/^  binmap_t   smallmap;$/;"	m	struct:malloc_state	file:	access:public
smallmap_is_marked	malloc.c	2774;"	d	file:
smblks	malloc.c	/^  MALLINFO_FIELD_TYPE smblks;   \/* always 0 *\/$/;"	m	struct:mallinfo	file:	access:public
snitchaser_main	snitchaser_main.c	/^snitchaser_main(struct snitchaser_startup_stack * stack)$/;"	f	signature:(struct snitchaser_startup_stack * stack)
snitchaser_startup_stack	snitchaser_main.h	/^struct snitchaser_startup_stack {$/;"	s
snitchaser_startup_stack::retaddr	snitchaser_main.h	/^	void * volatile retaddr;$/;"	m	struct:snitchaser_startup_stack	access:public
snitchaser_startup_stack::saved_regs	snitchaser_main.h	/^	volatile struct pusha_regs saved_regs;$/;"	m	struct:snitchaser_startup_stack	typeref:struct:snitchaser_startup_stack::pusha_regs	access:public
space_sz	checkpoint.h	/^	size_t space_sz;$/;"	m	struct:map_file_info	access:public
stack_reg	processor.h	24;"	d
stack_top	checkpoint.h	/^	uintptr_t stack_top;$/;"	m	struct:checkpoint_head	access:public
stack_top	interp_main.h	/^	void * volatile stack_top;$/;"	m	struct:interp_startup_stack	access:public
stack_top	processor.h	27;"	d
stack_top	snitchaser_tpd.h	/^	void * stack_top;$/;"	m	struct:thread_private_data	access:public
start	checkpoint.h	/^	uintptr_t start;$/;"	m	struct:map_file_info	access:public
start	proc.h	/^	uintptr_t start;$/;"	m	struct:proc_maps_entry_t	access:public
start_addr	tls.h	/^	void * start_addr;$/;"	m	struct:tls_desc	access:public
start_ptr	logger_tpd.h	/^	void * start_ptr;$/;"	m	struct:logger_tpd_stub	access:public
startup_stack_info	startup_stack.c	/^struct startup_stack_info startup_stack_info = {$/;"	v	typeref:struct:startup_stack_info
startup_stack_info	startup_stack.h	/^struct startup_stack_info {$/;"	s
startup_stack_info::auxv_info	startup_stack.h	/^	struct auxv_info auxv_info;$/;"	m	struct:startup_stack_info	typeref:struct:startup_stack_info::auxv_info	access:public
startup_stack_info::bottom_exec_fn	startup_stack.h	/^	const char * bottom_exec_fn;$/;"	m	struct:startup_stack_info	access:public
startup_stack_info::cmdline_argbegin	startup_stack.h	/^	const char * cmdline_argbegin;$/;"	m	struct:startup_stack_info	access:public
startup_stack_info::cmdline_argend	startup_stack.h	/^	const char * cmdline_argend;$/;"	m	struct:startup_stack_info	access:public
startup_stack_info::envbegin	startup_stack.h	/^	const char * envbegin;$/;"	m	struct:startup_stack_info	access:public
startup_stack_info::envend	startup_stack.h	/^	const char * envend;$/;"	m	struct:startup_stack_info	access:public
startup_stack_info::p_argc	startup_stack.h	/^	long int * p_argc;$/;"	m	struct:startup_stack_info	access:public
startup_stack_info::p_args	startup_stack.h	/^	const char ** p_args;$/;"	m	struct:startup_stack_info	access:public
startup_stack_info::p_auxvs	startup_stack.h	/^	long int * p_auxvs;$/;"	m	struct:startup_stack_info	access:public
startup_stack_info::p_envs	startup_stack.h	/^	const char ** p_envs;$/;"	m	struct:startup_stack_info	access:public
sys_alloc	malloc.c	/^static void* sys_alloc(mstate m, size_t nb) {$/;"	f	file:	signature:(mstate m, size_t nb)
sys_brk	syscall.c	/^sys_brk(void * addr)$/;"	f	signature:(void * addr)
sys_close	syscall.c	/^sys_close(int fd)$/;"	f	signature:(int fd)
sys_dup2	syscall.c	/^sys_dup2(int fd1, int fd2)$/;"	f	signature:(int fd1, int fd2)
sys_execve	syscall.c	/^sys_execve(const char * filename, const char ** args, const char ** envs)$/;"	f	signature:(const char * filename, const char ** args, const char ** envs)
sys_fork	syscall.c	/^sys_fork(void)$/;"	f	signature:(void)
sys_fstat64	syscall.c	/^sys_fstat64(unsigned long fd, struct stat64 * statbuf)$/;"	f	signature:(unsigned long fd, struct stat64 * statbuf)
sys_get_thread_area	syscall.c	/^sys_get_thread_area(struct user_desc * u_info)$/;"	f	signature:(struct user_desc * u_info)
sys_getpid	syscall.c	/^sys_getpid(void)$/;"	f	signature:(void)
sys_gettid	syscall.c	/^sys_gettid(void)$/;"	f	signature:(void)
sys_gettimeofday	syscall.c	/^sys_gettimeofday(struct timeval * tv, struct timezone * tz)$/;"	f	signature:(struct timeval * tv, struct timezone * tz)
sys_kill	syscall.c	/^sys_kill(int pid, int sig)$/;"	f	signature:(int pid, int sig)
sys_lseek	syscall.c	/^sys_lseek(int fd, off_t offset, unsigned int origin)$/;"	f	signature:(int fd, off_t offset, unsigned int origin)
sys_mmap2	syscall.c	/^sys_mmap2(void * addr, size_t length, int prot, int flags,$/;"	f	signature:(void * addr, size_t length, int prot, int flags, int fd, off_t pgoffset)
sys_mprotect	syscall.c	/^sys_mprotect(void * ptr, size_t sz, uint32_t prot)$/;"	f	signature:(void * ptr, size_t sz, uint32_t prot)
sys_mremap	syscall.c	/^sys_mremap(void * addr,size_t old_len, size_t new_len,$/;"	f	signature:(void * addr,size_t old_len, size_t new_len, int flags, void * new_addr)
sys_munmap	syscall.c	/^sys_munmap(void * addr, size_t length)$/;"	f	signature:(void * addr, size_t length)
sys_open	syscall.c	/^sys_open(const char * filename, int flags, int mode)$/;"	f	signature:(const char * filename, int flags, int mode)
sys_personality	syscall.c	/^sys_personality(unsigned long int persona)$/;"	f	signature:(unsigned long int persona)
sys_read	syscall.c	/^sys_read(int fd, void * buffer, size_t sz)$/;"	f	signature:(int fd, void * buffer, size_t sz)
sys_recv	syscall.c	/^sys_recv(int fd, void * buf, size_t len, unsigned flags)$/;"	f	signature:(int fd, void * buf, size_t len, unsigned flags)
sys_rt_sigaction	syscall.c	/^sys_rt_sigaction(int sig, const struct sigaction * act,$/;"	f	signature:(int sig, const struct sigaction * act, struct sigaction * oact, size_t sigsetsize)
sys_rt_sigprocmask	syscall.c	/^sys_rt_sigprocmask(int how, sigset_t * set, sigset_t * oset,$/;"	f	signature:(int how, sigset_t * set, sigset_t * oset, size_t sigsetsize)
sys_select	syscall.c	/^sys_select(int n, fd_set * inp, fd_set * outp, fd_set * exp,$/;"	f	signature:(int n, fd_set * inp, fd_set * outp, fd_set * exp, struct timeval * tvp)
sys_send	syscall.c	/^sys_send(int fd, const void * buf, size_t len, unsigned flags)$/;"	f	signature:(int fd, const void * buf, size_t len, unsigned flags)
sys_set_thread_area	syscall.c	/^sys_set_thread_area(struct user_desc * u_info)$/;"	f	signature:(struct user_desc * u_info)
sys_stat64	syscall.c	/^sys_stat64(const char * fn, struct stat64 * st)$/;"	f	signature:(const char * fn, struct stat64 * st)
sys_tgkill	syscall.c	/^sys_tgkill(int tgid, int pid, int sig)$/;"	f	signature:(int tgid, int pid, int sig)
sys_trim	malloc.c	/^static int sys_trim(mstate m, size_t pad) {$/;"	f	file:	signature:(mstate m, size_t pad)
sys_wait4	syscall.c	/^sys_wait4(pid_t pid, int * stat_addr, int options, struct rusage * ru)$/;"	f	signature:(pid_t pid, int * stat_addr, int options, struct rusage * ru)
sys_write	syscall.c	/^sys_write(int fd, const void * buffer, size_t size)$/;"	f	signature:(int fd, const void * buffer, size_t size)
syscall_post_handler	wrapper.c	/^void syscall_post_handler(const struct syscall_regs reg)$/;"	f	signature:(const struct syscall_regs reg)
syscall_post_handler	wrapper.c	/^void syscall_post_handler(const struct syscall_regs reg);$/;"	p	file:	signature:(const struct syscall_regs reg)
syscall_pre_handler	wrapper.c	/^void syscall_pre_handler(const struct syscall_regs reg)$/;"	f	signature:(const struct syscall_regs reg)
syscall_pre_handler	wrapper.c	/^void syscall_pre_handler(const struct syscall_regs reg);$/;"	p	file:	signature:(const struct syscall_regs reg)
syscall_stub	snitchaser_tpd.h	/^	struct syscall_tpd_stub syscall_stub;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::syscall_tpd_stub	access:public
syscall_tpd_stub	syscall_tpd.h	/^struct syscall_tpd_stub {$/;"	s
syscall_tpd_stub::bkup_regs	syscall_tpd.h	/^	struct pusha_regs bkup_regs;$/;"	m	struct:syscall_tpd_stub	typeref:struct:syscall_tpd_stub::pusha_regs	access:public
syscall_tpd_stub::bkup_stack_top	syscall_tpd.h	/^	void * bkup_stack_top;$/;"	m	struct:syscall_tpd_stub	access:public
syscall_tpd_stub::curr_syscall_nr	syscall_tpd.h	/^	int curr_syscall_nr;$/;"	m	struct:syscall_tpd_stub	access:public
syscall_tpd_stub::is_posted	syscall_tpd.h	/^	bool_t is_posted;$/;"	m	struct:syscall_tpd_stub	access:public
tbinptr	malloc.c	/^typedef struct malloc_tree_chunk* tbinptr; \/* The type of bins of trees *\/$/;"	t	typeref:struct:malloc_tree_chunk	file:
tchunk	malloc.c	/^typedef struct malloc_tree_chunk  tchunk;$/;"	t	typeref:struct:malloc_tree_chunk	file:
tchunkptr	malloc.c	/^typedef struct malloc_tree_chunk* tchunkptr;$/;"	t	typeref:struct:malloc_tree_chunk	file:
td	snitchaser_tpd.h	/^	struct tls_desc td;$/;"	m	struct:___bottom_tls	typeref:struct:___bottom_tls::tls_desc	access:public
this_bigbuffer	logger_tpd.h	/^	struct bigbuffer * this_bigbuffer;$/;"	m	struct:logger_tpd_stub	typeref:struct:logger_tpd_stub::bigbuffer	access:public
thread_map	tls.c	/^static uint32_t thread_map[SZ_MAP];$/;"	v	file:
thread_mutex	snitchaser_tpd.h	/^	struct xmutex thread_mutex;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::xmutex	access:public
thread_private_data	snitchaser_tpd.h	/^struct thread_private_data {$/;"	s
thread_private_data::bb	snitchaser_tpd.h	/^	struct bigbuffer bb;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::bigbuffer	access:public
thread_private_data::logger_stub	snitchaser_tpd.h	/^	struct logger_tpd_stub logger_stub;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::logger_tpd_stub	access:public
thread_private_data::mm_stub	snitchaser_tpd.h	/^	struct obj_mm_tpd_stub mm_stub;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::obj_mm_tpd_stub	access:public
thread_private_data::old_stack_top	snitchaser_tpd.h	/^	void * old_stack_top;$/;"	m	struct:thread_private_data	access:public
thread_private_data::pid	snitchaser_tpd.h	/^	pid_t pid;$/;"	m	struct:thread_private_data	access:public
thread_private_data::resume_addr	snitchaser_tpd.h	/^	void * resume_addr;$/;"	m	struct:thread_private_data	access:public
thread_private_data::saved_sigset	snitchaser_tpd.h	/^	sigset_t saved_sigset;$/;"	m	struct:thread_private_data	access:public
thread_private_data::stack_top	snitchaser_tpd.h	/^	void * stack_top;$/;"	m	struct:thread_private_data	access:public
thread_private_data::syscall_stub	snitchaser_tpd.h	/^	struct syscall_tpd_stub syscall_stub;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::syscall_tpd_stub	access:public
thread_private_data::thread_mutex	snitchaser_tpd.h	/^	struct xmutex thread_mutex;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::xmutex	access:public
thread_private_data::tid	snitchaser_tpd.h	/^	pid_t tid;$/;"	m	struct:thread_private_data	access:public
thread_private_data::tpd	snitchaser_tpd.h	/^	struct thread_private_data * tpd;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::thread_private_data	access:public
threadid	malloc.c	/^  long threadid;$/;"	m	struct:win32_mlock_t	file:	access:public
threadid	malloc.c	/^  pthread_t threadid;$/;"	m	struct:pthread_mlock_t	file:	access:public
tid	checkpoint.h	/^	uint32_t tid;$/;"	m	struct:checkpoint_head	access:public
tid	snitchaser_tpd.h	/^	pid_t tid;$/;"	m	struct:thread_private_data	access:public
tls_asm_slot_t	tls.h	/^typedef uint16_t tls_asm_slot_t;$/;"	t
tls_desc	tls.h	/^struct tls_desc {$/;"	s
tls_desc::fs_val	tls.h	/^	tls_asm_slot_t fs_val;$/;"	m	struct:tls_desc	access:public
tls_desc::list	tls.h	/^	struct list_head list;$/;"	m	struct:tls_desc	typeref:struct:tls_desc::list_head	access:public
tls_desc::nr	tls.h	/^	int nr;$/;"	m	struct:tls_desc	access:public
tls_desc::size	tls.h	/^	size_t size;$/;"	m	struct:tls_desc	access:public
tls_desc::start_addr	tls.h	/^	void * start_addr;$/;"	m	struct:tls_desc	access:public
tls_list	tls.c	/^LIST_HEAD(tls_list);$/;"	v
tls_lock	tls.c	/^DEFINE_UNLOCKED_XMUTEX(tls_lock);$/;"	v
tls_offset	snitchaser_tpd.h	45;"	d
tmalloc_large	malloc.c	/^static void* tmalloc_large(mstate m, size_t nb) {$/;"	f	file:	signature:(mstate m, size_t nb)
tmalloc_small	malloc.c	/^static void* tmalloc_small(mstate m, size_t nb) {$/;"	f	file:	signature:(mstate m, size_t nb)
tnr	checkpoint.h	/^	int tnr;$/;"	m	struct:checkpoint_head	access:public
top	malloc.c	/^  mchunkptr  top;$/;"	m	struct:malloc_state	file:	access:public
topsize	malloc.c	/^  size_t     topsize;$/;"	m	struct:malloc_state	file:	access:public
total_size	mm.h	/^	size_t total_size;$/;"	m	struct:obj_buk_head	access:public
tpd	snitchaser_tpd.h	/^	struct thread_private_data * tpd;$/;"	m	struct:thread_private_data	typeref:struct:thread_private_data::thread_private_data	access:public
tpd	snitchaser_tpd.h	/^	struct thread_private_data tpd;$/;"	m	struct:___bottom_tls	typeref:struct:___bottom_tls::thread_private_data	access:public
tpd_offset	snitchaser_tpd.h	48;"	d
traverse_and_check	malloc.c	/^static size_t traverse_and_check(mstate m) {$/;"	f	file:	signature:(mstate m)
traverse_and_check	malloc.c	/^static size_t traverse_and_check(mstate m);$/;"	p	file:	signature:(mstate m)
treebin_at	malloc.c	2684;"	d	file:
treebins	malloc.c	/^  tbinptr    treebins[NTREEBINS];$/;"	m	struct:malloc_state	file:	access:public
treemap	malloc.c	/^  binmap_t   treemap;$/;"	m	struct:malloc_state	file:	access:public
treemap_is_marked	malloc.c	2778;"	d	file:
trim_check	malloc.c	/^  size_t     trim_check;$/;"	m	struct:malloc_state	file:	access:public
trim_threshold	malloc.c	/^  size_t trim_threshold;$/;"	m	struct:malloc_params	file:	access:public
type	compression.h	/^	enum comp_block_type type;$/;"	m	struct:comp_block_head	typeref:enum:comp_block_head::comp_block_type	access:public
u	arch_checkpoint.c	/^	struct user_regs_struct u;$/;"	m	struct:arch_cpuinfo_s	typeref:struct:arch_cpuinfo_s::user_regs_struct	file:	access:public
umark	arch_checkpoint.c	/^	enum arch_ckpt_mark umark;$/;"	m	struct:arch_cpuinfo_s	typeref:enum:arch_cpuinfo_s::arch_ckpt_mark	file:	access:public
unblock_sigkill_replace	signal.h	39;"	d
unlink_chunk	malloc.c	3628;"	d	file:
unlink_first_small_chunk	malloc.c	3449;"	d	file:
unlink_large_chunk	malloc.c	3551;"	d	file:
unlink_small_chunk	malloc.c	3429;"	d	file:
unpatch_user_entry	arch_user_entry.c	/^unpatch_user_entry(void)$/;"	f	file:	signature:(void)
uordblks	malloc.c	/^  MALLINFO_FIELD_TYPE uordblks; \/* total allocated space *\/$/;"	m	struct:mallinfo	file:	access:public
usage	interp_main.c	/^usage(void)$/;"	f	file:	signature:(void)
use_lock	malloc.c	2505;"	d	file:
use_mmap	malloc.c	2509;"	d	file:
use_noncontiguous	malloc.c	2513;"	d	file:
usmblks	malloc.c	/^  MALLINFO_FIELD_TYPE usmblks;  \/* maximum total allocated space *\/$/;"	m	struct:mallinfo	file:	access:public
usz	arch_checkpoint.c	/^	size_t usz;$/;"	m	struct:arch_cpuinfo_s	file:	access:public
val	mutex.h	/^	atomic_t val;$/;"	m	struct:xmutex	access:public
valid	proc.h	/^	bool_t valid;$/;"	m	struct:proc_maps_entry_t	access:public
vfdbnprintf	fdbnprintf.c	/^vfdbnprintf(int fd, char * buffer, size_t buf_sz,$/;"	f	signature:(int fd, char * buffer, size_t buf_sz, const char * fmt, va_list args)
vfdbnprintf	fdbnprintf.h	/^vfdbnprintf(int fd, char * buffer, size_t buf_sz,$/;"	p	signature:(int fd, char * buffer, size_t buf_sz, const char * fmt, va_list args)
vsyscall_entry	interp_main.c	/^unsigned long vsyscall_entry;$/;"	v
win32_acquire_lock	malloc.c	/^static FORCEINLINE int win32_acquire_lock (MLOCK_T *sl) {$/;"	f	file:	signature:(MLOCK_T *sl)
win32_mlock_t	malloc.c	/^struct win32_mlock_t {$/;"	s	file:
win32_mlock_t::c	malloc.c	/^  unsigned int c;$/;"	m	struct:win32_mlock_t	file:	access:public
win32_mlock_t::l	malloc.c	/^  volatile long l;$/;"	m	struct:win32_mlock_t	file:	access:public
win32_mlock_t::threadid	malloc.c	/^  long threadid;$/;"	m	struct:win32_mlock_t	file:	access:public
win32_release_lock	malloc.c	/^static FORCEINLINE void win32_release_lock (MLOCK_T *sl) {$/;"	f	file:	signature:(MLOCK_T *sl)
win32_try_lock	malloc.c	/^static FORCEINLINE int win32_try_lock (MLOCK_T *sl) {$/;"	f	file:	signature:(MLOCK_T *sl)
win32direct_mmap	malloc.c	/^static FORCEINLINE void* win32direct_mmap(size_t size) {$/;"	f	file:	signature:(size_t size)
win32mmap	malloc.c	/^static FORCEINLINE void* win32mmap(size_t size) {$/;"	f	file:	signature:(size_t size)
win32munmap	malloc.c	/^static FORCEINLINE int win32munmap(void* ptr, size_t size) {$/;"	f	file:	signature:(void* ptr, size_t size)
wrapped_syscall	wrapper.c	/^void wrapped_syscall(const struct syscall_regs reg)$/;"	f	signature:(const struct syscall_regs reg)
wrapped_syscall	wrapper.h	/^wrapped_syscall();$/;"	p	signature:()
wrapped_syscall_entry	interp_main.c	/^wrapped_syscall_entry();$/;"	p	file:
wrapped_syscall_entry	wrapper.c	/^void wrapped_syscall_entry(void)$/;"	f	signature:(void)
write_comp_file_head	compression.c	/^write_comp_file_head(int fd)$/;"	f	signature:(int fd)
write_comp_file_head	compression.h	/^write_comp_file_head(int fd);$/;"	p	signature:(int fd)
write_ldt	tls.c	/^write_ldt(struct user_desc * desc)$/;"	f	file:	signature:(struct user_desc * desc)
write_section	checkpoint.c	/^write_section(int fd, enum ckpt_mark mark, const void * ptr, size_t length)$/;"	f	file:	signature:(int fd, enum ckpt_mark mark, const void * ptr, size_t length)
write_section_sg	checkpoint.c	/^write_section_sg(int fd, enum ckpt_mark mark, struct sg * sglist, int nr)$/;"	f	file:	signature:(int fd, enum ckpt_mark mark, struct sg * sglist, int nr)
writeto	checkpoint.c	/^writeto(int fd, const void * buffer, size_t sz)$/;"	f	file:	signature:(int fd, const void * buffer, size_t sz)
xalloc_pages	mm.c	/^xalloc_pages(size_t sz, bool_t executable)$/;"	f	signature:(size_t sz, bool_t executable)
xalloc_pages	mm.h	/^xalloc_pages(size_t sz, bool_t executable);$/;"	p	signature:(size_t sz, bool_t executable)
xcalloc	snitchaser_main.c	/^void * xcalloc(size_t nmenb, size_t size);$/;"	p	file:	signature:(size_t nmenb, size_t size)
xcalloc	snitchaser_main.c	/^xcalloc(size_t nmenb, size_t size)$/;"	f	signature:(size_t nmenb, size_t size)
xdealloc_pages	mm.c	/^xdealloc_pages(void * ptr, size_t sz)$/;"	f	signature:(void * ptr, size_t sz)
xdealloc_pages	mm.h	/^xdealloc_pages(void * ptr, size_t sz);$/;"	p	signature:(void * ptr, size_t sz)
xfree	snitchaser_main.c	/^void xfree(void * ptr, size_t size);$/;"	p	file:	signature:(void * ptr, size_t size)
xfree	snitchaser_main.c	/^xfree(void * ptr, size_t sz)$/;"	f	signature:(void * ptr, size_t sz)
xlogger_init	snitchaser_main.c	/^xlogger_init(pid_t pid)$/;"	f	signature:(pid_t pid)
xmain	interp_main.c	/^xmain(struct interp_startup_stack * startup_stack)$/;"	f	signature:(struct interp_startup_stack * startup_stack)
xmalloc	snitchaser_main.c	/^void * xmalloc(size_t size);$/;"	p	file:	signature:(size_t size)
xmalloc	snitchaser_main.c	/^xmalloc(size_t size)$/;"	f	signature:(size_t size)
xmemckpt_init	snitchaser_main.c	/^xmemckpt_init(pid_t pid)$/;"	f	signature:(pid_t pid)
xmemset	snitchaser_main.c	/^void *xmemset(void *s, int c, size_t count)$/;"	f	signature:(void *s, int c, size_t count)
xmutex	mutex.h	/^struct xmutex {$/;"	s
xmutex::val	mutex.h	/^	atomic_t val;$/;"	m	struct:xmutex	access:public
xmutex_init	mutex.h	/^xmutex_init(struct xmutex * lock)$/;"	f	signature:(struct xmutex * lock)
xmutex_is_locked	mutex.h	/^xmutex_is_locked(struct xmutex * x)$/;"	f	signature:(struct xmutex * x)
xmutex_lock	mutex.c	/^xmutex_lock(struct xmutex * lock)$/;"	f	signature:(struct xmutex * lock)
xmutex_lock	mutex.h	/^xmutex_lock(struct xmutex * lock);$/;"	p	signature:(struct xmutex * lock)
xmutex_unlock	mutex.c	/^xmutex_unlock(struct xmutex * lock, sigset_t sigset)$/;"	f	signature:(struct xmutex * lock, sigset_t sigset)
xmutex_unlock	mutex.h	/^xmutex_unlock(struct xmutex * lock, sigset_t mask);$/;"	p	signature:(struct xmutex * lock, sigset_t mask)
xrealloc	snitchaser_main.c	/^void * xrealloc(void * old_ptr, size_t old_size, size_t new_size);$/;"	p	file:	signature:(void * old_ptr, size_t old_size, size_t new_size)
xrealloc	snitchaser_main.c	/^xrealloc(void *old_ptr, size_t old_size, size_t size)$/;"	f	signature:(void *old_ptr, size_t old_size, size_t size)
