# syntax:
# table <name> { ... }

table onebyte {
# table a-2/1
	0x00: add Eb, Gb
	0x01: add Ev, Gv
	0x02: add Gb, Eb
	0x03: add Gv, Ev
	0x04: add "AL", Ib
	0x05: add "rAX", Iz
	0x06: push "ES" | i64
	0x07: pop "ES" | i64

	0x10: adc Eb, Gb
	0x11: adc Ev, Gv
	0x12: adc Gb, Eb
	0x13: adc Gv, Ev
	0x14: adc "AL", Iz
	0x15: adc "rAX", Iz
	0x16: push "SS" | i64
	0x17: pop "SS" | i64

	0x20: and Eb, Gb
	0x21: and Ev, Gv
	0x22: and Gb, Eb
	0x23: and Gv, Ev
	0x24: and "AL", Iz
	0x25: and "rAX", Iz
	0x26: PREFIX2
	0x27: daa | i64

	0x30: xor Eb, Gb
	0x31: xor Ev, Gv
	0x32: xor Gb, Eb
	0x33: xor Gv, Ev
	0x34: xor "AL", Iz
	0x35: xor "rAX", Iz
	0x36: PREFIX2
	0x37: aaa | i64

# such GRP have "o64" automatically
	X64 {
		0x40-0x47: REX
	}
	
# such GRP have "i64" automatically
	X32 {
		0x40: inc "eAX"
		0x41: inc "eCX"
		0x42: inc "eDX"
		0x43: inc "eBX"
		0x44: inc "eSP"
		0x45: inc "eBP"
		0x46: inc "eSI"
		0x47: inc "eDI"
	}

	0x50: push "rAX/r8" | d64
	0x51: push "rCX/r9" | d64
	0x52: push "rDX/r10" | d64
	0x53: push "rBX/r11" | d64
	0x54: push "rSP/r12" | d64
	0x55: push "rBP/r13" | d64
	0x56: push "rSI/r14" | d64
	0x57: push "rDI/r15" | d64
	
	0x60: pusha | i64
	0x61: popa | i64
	0x62: bound Gv, Ma | i64

	0x63: movsxd Gv, Ev | o64
	0x63: arpl Ew, Gw | i64

	0x64: PREFIX2
	0x65: PREFIX2
	0x66: PREFIX3
	# XXX address size impact the meaning of modrm
	0x67: PREFIX4
	
	0x70: jo Jb | f64 !
	0x71: jno Jb | f64 !
	0x72: jb Jb | f64 !
	0x73: jae Jb | f64 !
	0x74: je Jb | f64 !
	0x75: jne Jb | f64 !
	0x76: jbe Jb | f64 !
	0x77: ja Jb | f64 !

	0x80: GRP1_0x80
	0x81: GRP1_0x81
	0x82: GRP1_0x82
	0x83: GRP1_0x83

	0x84: test Eb, Gb
	0x85: test Ev, Gv
	0x86: xchg Eb, Gb
	0x87: xchg Ev, Gv

	0x90: nop
	0x91: xchg "rAX", "rCX/r9"
	0x92: xchg "rAX", "rDX/r10"
	0x93: xchg "rAX", "rBX/r11"
	0x94: xchg "rAX", "rSP/r12"
	0x95: xchg "rAX", "rBP/r13"
	0x96: xchg "rAX", "rSI/r14"
	0x97: xchg "rAX", "rDI/r15"

	0xa0: mov "AL", Ob
	0xa1: mov "rAX", Ov
	0xa2: mov Ob, "AL"
	0xa3: mov Ov, "rAX"
	0xa4: movs Xb, Yb
	0xa5: movs Xv, Yv
	0xa6: cmps Xb, Yb
	0xa7: cmps Xv, Yv

	0xb0: mov "AL/R8L", Ib
	0xb1: mov "CL/R9L", Ib
	0xb2: mov "DL/R10L", Ib
	0xb3: mov "BL/R11L", Ib
	0xb4: mov "AH/R12L", Ib
	0xb5: mov "CH/R13L", Ib
	0xb6: mov "DH/R14L", Ib
	0xb7: mov "BH/R15L", Ib

	0xc0: GRP2_0xc0
	0xc1: GRP2_0xc1
	0xc2: retn Iw | f64 !
	0xc3: retn | f64 !
	0xc4: les Gz, Mp | i64
	0xc5: lds Gz, Mp | i64
	0xc6: GRP11_0xc6
	0xc7: GRP11_0xc7

	0xd0: GRP2_0xd0
	0xd1: GRP2_0xd1
	0xd2: GRP2_0xd2
	0xd3: GRP2_0xd3
	0xd4: amm Ib | i64
	0xd5: aad Ib | i64
	0xd6: BAD
	0xd7: xlat

	0xe0: loopne Jb | f64 !
	0xe1: loope Jb | f64 !
	0xe2: loop Jb | f64 !
	0xe3: jecxz Jb | f64 !
	0xe4: in "AL", Ib
	0xe5: in "eAX", Ib
	0xe6: out Ib, "AL"
	0xe7: out Ib, "eAX"

	0xf0: PREFIX1
	0xf1: BAD
	0xf2: PREFIX1
	0xf3: PREFIX1
	0xf4: hlt
	0xf5: cmc
	0xf6: GRP3_0xf6
	0xf7: GRP3_0xf7


# table a-2/2

	0x08: or Eb, Gb
	0x09: or Ev, Gv
	0x0a: or Gb, Eb
	0x0b: or Gv, Ev
	0x0c: or "AL", Ib
	0x0d: or "rAX", Iz
	0x0e: pushcs | i64
	0x0f: ESCAPETWOBYTES

	0x18: sbb Eb, Gb
	0x19: sbb Ev, Gv
	0x1a: sbb Gb, Eb
	0x1b: sbb Gv, Ev
	0x1c: sbb "AL", Ib
	0x1d: sbb "rAX", Iz
	0x1e: pushds | i64
	0x1f: popds

	0x28: sub Eb, Gb
	0x29: sub Ev, Gv
	0x2a: sub Gb, Eb
	0x2b: sub Gv, Ev
	0x2c: sub "AL", Ib
	0x2d: sub "rAX", Iz
	0x2e: PREFIX2
	0x2f: das | i64

	0x38: cmp Eb, Gb
	0x39: cmp Ev, Gv
	0x3a: cmp Gb, Eb
	0x3b: cmp Gv, Ev
	0x3c: cmp "AL", Ib
	0x3d: cmp "rAX", Iz
	0x3e: PREFIX2
	0x3f: aas | i64



	X64 {
		0x48-0x4f: REX
	}

	X32 {
		0x48: dec "eAX"
		0x49: dec "eCX"
		0x4a: dec "eDX"
		0x4b: dec "eBX"
		0x4c: dec "eSP"
		0x4d: dec "eBP"
		0x4e: dec "eSI"
		0x4f: dec "eDI"
	}

	0x58: pop "rAX/r8" | d64
	0x59: pop "rCX/r9" | d64
	0x5a: pop "rDX/r10" | d64
	0x5b: pop "rBX/r11" | d64
	0x5c: pop "rSP/r12" | d64
	0x5d: pop "rBP/r13" | d64
	0x5e: pop "rSI/r14" | d64
	0x5f: pop "rDI/r15" | d64

	0x68: push Iz | d64
	0x69: imul Gv, Ev, Iz
	0x6a: push Ib
	0x6b: imul Gv, Ev, Ib
	0x6c: insb Yb, "DX"
	0x6d: ins Yz, "DX"
	0x6e: outs "DX", Xb
	0x6f: outs "DX", Xz

	0x78: js Jb | f64 !
	0x79: jns Jb | f64 !
	0x7a: jp Jb | f64 !
	0x7b: jnp Jb | f64 !
	0x7c: jl Jb | f64 !
	0x7d: jge Jb | f64 !
	0x7e: jle Jb | f64 !
	0x7f: jg Jb | f64 !

	0x88: mov Eb, Gb
	0x89: mov Ev, Gv
	0x8a: mov Gb, Eb
	0x8b: mov Gv, Ev
	0x8c: mov Ev, Sw
	0x8d: lea Gv, Mxx
	0x8e: mov Sw, Ew
	0x8f: GRP1A_0x8f

	0x98: cwtl
	0x99: cltd
	0x9a: callf Ap | i64 !
	0x9b: fwait
	0x9c: pushf Fv
	0x9d: popf Fv
	0x9e: sahf
	0x9f: lahf

	0xa8: test "AL", Ib
	0xa9: test "rAX", Iz
	0xaa: stosb Yb, "AL"
	0xab: stos Yv, "rAX"
	0xac: lodsb "AL", Xb
	0xad: lods "rAX", Xv
	0xae: scasb "AL", Yb
	0xaf: scas "rAX", Xv

	0xb8: mov "rAX/r8", Iv
	0xb9: mov "rCX/r9", Iv
	0xba: mov "rDX/r10", Iv
	0xbb: mov "rBX/r11", Iv
	0xbc: mov "rSP/r12", Iv
	0xbd: mov "rBP/r13", Iv
	0xbe: mov "rSI/r14", Iv
	0xbf: mov "rDI/r15", Iv

	0xc8: enter Iw, Ib
	0xc9: leave | d64
	0xca: lret Iw | !
	0xcb: lret | !
	0xcc: int3 | !
	0xcd: int | !
	0xce: into | !
	0xcf: iret

	0xd8-0xdf: ESCAPECOPROCESSOR

	0xe8: call Jz | !
	0xe9: jmp Jz | f64 !
	0xea: ljmp Ap | i64 !
	0xeb: jmp Jb | f64 !
	0xec: in "AL", "DX"
	0xed: in "eAX", "DX"
	0xee: out "DX", "AL"
	0xef: out "DX", "eAX"

	0xf8: clc
	0xf9: stc
	0xfa: cli
	0xfb: sti
	0xfc: cld
	0xfd: std
	0xfe: GRP4_0xfe
	0xff: GRP5_0xff
}

table twobytes {
	0x00: GRP6_0x0f00
	0x01: XXXGRP7
	0x02: lar Gv, Ew
	0x03: lsl Gv, Ew
	0x05: syscall | !
	0x06: clts
	0x07: sysret | !
	0x10: [none] movups Vps, Wps
	0x10: [0xf3] movss Vss, Wss
	0x10: [0x66] movupd Vpd, Wpd
	0x10: [0xf2] movsd Vsd, Wsd

	0x11: [none] movups Wps, Vps
	0x11: [0xf3] movss Wss, Vss
	0x11: [0x66] movupd Wpd, Vpd
	0x11: [0xf2] movsd Wsd, Vsd

	0x12: [none] movlpsormovhlps Vq, Wq
	0x12: [0x66] movlpd Vq, Mq
	0x12: [0xf2] movddup Vq, Wq
	0x12: [0xf3] movsldup Vq, Wq

	0x13: [none] movlps Mq, Vq
	0x13: [0x66] movlpd Mq, Vq

	0x14: [none] unpcklps Vps, Wq
	0x14: [0x66] unpcklpd Vpd, Wq

	0x15: [none] unpckhps Vps, Wq
	0x15: [0x66] unpckhpd Vpd, Wq

	0x16: [none] movhpsormovlhps Vq, Wq
	0x16: [0x66] movhpd Vq, Mq
	0x16: [0xf3] movshdup Vq, Wq

	0x17: [none] movhps Mq, Vq
	0x17: [0x66] movhpd Mq, Vq

	0x20: mov Rd, Cd | !
	0x21: mov Rd, Dd
	0x22: mov Cd, Rd
	0x23: mov Dd, Rd

	0x30: wrmsr
	0x31: rdtsc | !
	0x32: rdmsr
	0x33: rdpmc | !
	0x34: sysenter | !
	0x35: sysexit | !

	0x40: cmovo Gv, Ev
	0x41: cmovno Gv, Ev
	0x42: cmovb Gv, Ev
	0x43: cmovae Gv, Ev
	0x44: cmove Gv, Ev
	0x45: cmovne Gv, Ev
	0x46: cmovbe Gv, Ev
	0x47: cmova Gv, Ev 

	0x50: [none] movmskps Gd, Ups
	0x50: [0x66] movmskpd Gd, Ups

	0x51: [none] sqrtps Vps, Wps
	0x51: [0xf3] sqrtss Vss, Wss
	0x51: [0x66] sqrtpd Vpd, Wpd
	0x51: [0xf2] sqrtsd Vsd, Wsd

	0x52: [none] rsqrtps Vps, Wps
	0x52: [0xf3] rsqrtss Vss, Wss
	
	0x53: [none] rcpps Vps, Wps
	0x53: [0xf3] rcpss Vss, Wss

	0x54: [none] andps Vps, Wps
	0x54: [0x66] andpd Vpd, Wpd

	0x55: [none] andnps Vps, Wps
	0x55: [0x66] andnpd Vpd, Wpd

	0x56: [none] orps Vps, Wps
	0x56: [0x66] orpd Vpd, Wpd

	0x57: [none] xorps Vps, Wps
	0x57: [0x66] xorpd Vpd, Wpd

	0x60: [none] punpcklbw Pq, Qd
	0x60: [0x66] punpcklbw Vdq, Wdq

	0x61: [none] punpcklwd Pq, Qd
	0x61: [0x66] punpcklwd Vdq, Wdq

	0x62: [none] punpckldq Pq, Qd
	0x62: [0x66] punpckldq Vdq, Wdq

	0x63: [none] packsswb Pq, Qd
	0x63: [0x66] packsswb Vdq, Wdq

	0x64: [none] pcmpgtb Pq, Qd
	0x64: [0x66] pcmpgtb Vdq, Wdq

	0x65: [none] pcmpgtw Pq, Qd
	0x65: [0x66] pcmpgtw Vdq, Wdq

	0x66: [none] pcmpgtd Pq, Qd
	0x66: [0x66] pcmpgtd Vdq, Wdq

	0x67: [none] packuswb Pq, Qd
	0x67: [0x66] packuswb Vdq, Wdq

	0x70: [none] pshufw Pq, Qd, Ib
	0x70: [0x66] pshufd Vdq, Wdq, Ib
	0x70: [0xf3] pshufhw Vdq, Wdq, Ib
	0x70: [0xf2] pshuflw Vdq, Wdq, Ib

	0x71: GRP12_0x0f71 | 1A
	0x72: GRP13_0x0f72 | 1A
	0x73: GRP14_0x0f73 | 1A

	0x74: [none] pcmpeqb Pq, Qq
	0x74: [0x66] pcmpeqb Vdq, Wdq

	0x75: [none] pcmpeqw Pq, Qq
	0x75: [0x66] pcmpeqw Vdq, Wdq

	0x76: [none] pcmpeqd Pq, Qq
	0x76: [0x66] pcmpeqd Vdq, Wdq

	0x77: emms

	0x08: invd
	0x09: wbinvd
	0x0b: BAD
	0x0d: nop Ev

	0x18: GRP16_0x0f18

	0x1f: nop Ev

	0x28: [none] movaps Vps, Wps
	0x28: [0x66] movapd Vpd, Wpd

	0x29: [none] movaps Wps, Vps
	0x29: [0x66] movapd Wpd, Vpd

	0x2a: [none] cvtpi2ps Vps, Qpi
	0x2a: [0xf3] cvtsi2ss Vss, Eq
	0x2a: [0x66] cvtpi2pd Vpd, Qpi
	0x2a: [0xf2] cvtsi2sd Vsd, Eq

	0x2b: [none] movntps Mps, Vps
	0x2b: [0x66] movntpd Mpd, Vpd

	0x2c: [none] cvttps2pi Ppi, Wps
	0x2c: [0xf3] cvttss2si Gq, Wsd

	0x2d: [none] cvtps2pi Ppi, Wps
	0x2d: [0xf3] cvtss2si Gq, Wss
	0x2d: [0x66] cvtpd2pi Qpi, Wpd
	0x2d: [0xf2] cvtsd2si Gq, Wsd

	0x2e: [none] ucomiss Vss, Wss
	0x2e: [0x66] ucomisd Vsd, Wsd

	0x2f: [none] comiss Vss, Wss
	0x2f: [0x66] comisd Vsd, Wsd

	0x38: ESCAPETHREEBYTESA
	0x3a: ESCAPETHREEBYTESB

	0x48: cmovs Gv, Ev
	0x49: cmovns Gv, Ev
	0x4a: cmovp Gv, Ev
	0x4b: cmovnp Gv, Ev
	0x4c: cmovl Gv, Ev
	0x4d: cmovge Gv, Ev
	0x4e: cmovle Gv, Ev
	0x4f: cmovg Gv, Ev

	0x58: [none] addps Vps, Wps
	0x58: [0xf3] addss Vss, Wss
	0x58: [0x66] addpd Vpd, Wpd
	0x58: [0xf2] addsd Vsd, Wsd

	0x59: [none] mulps Vps, Wps
	0x59: [0xf3] mulss Vss, Wss
	0x59: [0x66] mulpd Vpd, Wpd
	0x59: [0xf2] mulsd Vsd, Wsd

	0x5a: [none] cvtps2pd Vpd, Wps
	0x5a: [0xf3] cvtss2sd Vsd, Wss
	0x5a: [0x66] cvtpd2ps Vps, Wpd
	0x5a: [0xf2] cvtsd2ss Vsd, Wsd

	0x5b: [none] cvtdq2ps Vps, Wdq
	0x5b: [0x66] cvtps2dq Vdq, Wps
	0x5b: [0xf3] cvttps2dq Vdq, Wps

	0x5c: [none] subps Vps, Wps
	0x5c: [0xf3] subss Vss, Wss
	0x5c: [0x66] subpd Vpd, Wpd
	0x5c: [0xf2] subsd Vsd, Wsd

	0x5d: [none] minps Vps, Wps
	0x5d: [0xf3] minss Vss, Wss
	0x5d: [0x66] minpd Vpd, Wpd
	0x5d: [0xf2] minsd Vsd, Wsd

	0x5e: [none] divps Vps, Wps
	0x5e: [0xf3] divss Vss, Wss
	0x5e: [0x66] difpd Vpd, Wpd
	0x5e: [0xf2] divsd Vsd, Wsd

	0x5f: [none] maxps Vps, Wps
	0x5f: [0xf3] maxss Vss, Wss
	0x5f: [0x66] maxpd Vpd, Wpd
	0x5f: [0xf2] maxsd Vsd, Wsd

	0x68: [none] punpckhbw Pq, Qd
	0x68: [0x66] punpckhbw Vdq, Wdq

	0x69: [none] punpckhwd Pq, Dq
	0x69: [0x66] punpckhwd Vdq, Wdq

	0x6a: [none] punpkchdq Pq, Qd
	0x6a: [0x66] punpckhdq Vdq, Wdq

	0x6b: [none] packssdw Pq, Qd
	0x6b: [0x66] packssdw Vdq, Wdq

	0x6c: [0x66] punpcklqdq Vdq, Wdq

	0x6d: [0x66] punpckhqdq Vdq, Wdq

	0x6e: [none] movdormovq Pd, Eq
	0x6e: [0x66] movdormovq Vdq, Eq

	0x6f: [none] movdq Pq, Qq
	0x6f: [0x66] movdqa Vdq, Wdq
	0x6f: [0xf3] movdqu Vdq, Wdq

	0x78: vmread Eq, Gq
	0x79: vmwrite Gq, Eq

	0x7c: [0xf2] haddps Vps, Wps
	0x7c: [0x66] haddpd Vpd, Wpd

	0x7d: [0xf2] hsubps Vps, Wps
	0x7d: [0x66] hsubpd Vpd, Wpd

	0x7e: [none] movdormovq Eq, Pd
	0x7e: [0x66] movdormovq Eq, Vdq
	0x7e: [0xf3] movq Vq, Wq

	0x7f: [none] movq Qq, Pq
	0x7f: [0x66] movdqa Wdq, Vdq
	0x7f: [0xf3] movdqu Wdq, Vdq

	0x80: jo Jz | !
	0x81: jno Jz | !
	0x82: jb Jz | !
	0x83: jnb Jz | !
	0x84: je Jz | !
	0x85: jne Jz | !
	0x86: jna Jz | !
	0x87: ja Jz | !


	0x90: seto  Eb
	0x91: setno Eb
	0x92: setb  Eb
	0x93: setnb Eb
	0x94: sete  Eb
	0x95: setne Eb
	0x96: setna Eb
	0x97: seta  Eb

	0xa0: pushfs | d64
	0xa1: popfs | d64
	0xa2: cpuid
	0xa3: bt Ev, Gv
	0xa4: shld Ev, Gv, Ib
	0xa5: shld Ev, Gv, "CL"
	
	0xb0: cmpxchg Eb, Gb
	0xb1: cmpxchg Ev, Gv
	0xb2: lss Gv, Mp
	0xb3: btr Ev, Gv
	0xb4: lfs Gv, Mp
	0xb5: lgs Gv, Mp
	0xb6: movzx Gv, Eb
	0xb7: movzx Gv, Ew

	0xc0: xadd Eb, Gb
	0xc1: xadd Ev, Gv
	0xc2: [none] cmpps Vps, Wps, Ib
	0xc2: [0xf3] cmpss Vss, Wss, Ib
	0xc2: [0x66] cmppd Vpd, Wpd, Ib
	0xc2: [0xf2] cmpsd Vsd, Wsd, Ib

	0xc3: movnti Mq, Gq
	0xc4: [none] pinsrw Pq, Eq, Ib
	0xc4: [0x66] pinsrw Vdq, Eq, Ib

	0xc5: [none] pextrw Gd, Nq, Ib
	0xc5: [0x66] pextrw Gd, Udq, Ib

	0xc6: [none] shufps Vps, Wps, Ib
	0xc6: [0x66] shufpd Vpd, Wpd, Ib

	0xc7: GRP9_0x0fc7

	0xd0: [0xf2] addsubps Vps, Wps
	0xd0: [0x66] addsubpd Vpd, Wpd

	0xd1: [none] psrlw Pq, Dq
	0xd1: [0x66] psrlw Vdq, Wdq

	0xd2: [none] psrld Pq, Qq
	0xd2: [0x66] psrld Vdq, Wdq

	0xd3: [none] psrlq Pq, Dq
	0xd3: [0x66] parlq Vdq, Wdq

	0xd4: [none] paddq Pq, Qq
	0xd4: [0x66] paddq Vdq, Wdq

	0xd5: [none] pmullw Pq, Dq
	0xd5: [0x66] pmullw Vdq, Wdq

	0xd6: [0x66] movq Wq, Vq
	0xd6: [0xf3] movq2dq Vdq, Nq
	0xd6: [0xf2] movdq2q Pq, Uq

	0xd7: [none] pmovmskb Gd, Nq
	0xd7: [0x66] pmovmskb Gd, Udq

	0xe0: [none] pavgb Pq, Qq
	0xe0: [0x66] pavgb Vdq, Wdq

	0xe1: [none] psraw Pq, Qq
	0xe1: [0x66] psraw Vdq, Wdq

	0xe2: [none] psrad Pq, Qq
	0xe2: [0x66] psrad Vdq, Wdq

	0xe3: [none] pavgw Pq, Qq
	0xe3: [0x66] pavgw Vdq, Wdq

	0xe4: [none] pmulhuw Pq, Qq
	0xe4: [0x66] pmulhuw Vdq, Wdq

	0xe5: [none] pmulhw Pq, Qq
	0xe5: [0x66] pmulhw Vdq, Wdq

	0xe6: [0xf2] cvtpd2dq Vdq, Wpd
	0xe6: [0x66] cvttpd2dq Vdq, Wpd
	0xe6: [0xf3] cvtdq2pd Vpd, Wdq

	0xe7: [none] movntq Mq, Pq
	0xe7: [0x66] movntdq Mdq, Vdq

	0xf0: [0xf2] iddqu Vdq, Mdq

	0xf1: [none] psllw Pq, Qq
	0xf1: [0x66] psllw Vdq, Wdq

	0xf2: [none] pslld Pq, Qq
	0xf2: [0x66] pslld Vdq, Wdq

	0xf3: [none] psllq Pq, Qq
	0xf3: [0x66] psllq Vdq, Wdq

	0xf4: [none] pmuludq Pq, Qq
	0xf4: [0x66] pmuludq Vdq, Wdq

	0xf5: [none] pmaddwd Pq, Qq
	0xf5: [0x66] pmaddwd Vdq, Wdq

	0xf6: [none] psadbw Pq, Qq
	0xf6: [0x66] psadbw Vdq, Wdq

	0xf7: [none] maskmovq Pq, Nq
	0xf7: [0x66] maskmovdqu Vdq, Udq

	0x88: js  Jz | !
	0x89: jns Jz | !
	0x8a: jp  Jz | !
	0x8b: jnp Jz | !
	0x8c: jl  Jz | !
	0x8d: jge Jz | !
	0x8e: jle Jz | !
	0x8f: jg  Jz | !

	0x98: sets  Eb 
	0x99: setns Eb 
	0x9a: setp  Eb 
	0x9b: setnp Eb 
	0x9c: setl  Eb 
	0x9d: setge Eb 
	0x9e: setle Eb 
	0x9f: setg  Eb 

	0xa8: pushgs | d64
	0xa9: popgs | d64
	0xaa: rsm
	0xab: bts Ev, Gv
	0xac: shrd Ev, Gv, Ib
	0xad: shrd Ev, Gv, "CL"
	0xae: XXXGRP15
	0xaf: imul Gv, Ev

	0xb8: [none] jmpe | !
	0xb8: [0xf3] popcnt Gv, Ev

	0xb9: BAD

	0xba: GRP8_0x0fba

	0xbb: btc Ev, Gv
	0xbc: bsf Gv, Ev
	0xbd: bsr Gv, Ev
	0xbe: movsx Gv, Eb
	0xbf: movsx Gv, Ew

	0xc8: bswap "rAX/r8"
	0xc9: bswap "rCX/r9"
	0xca: bswap "rDX/r10"
	0xcb: bswap "rBX/r11"
	0xcc: bswap "rSP/r12"
	0xcd: bswap "rBP/r13"
	0xce: bswap "rSI/r14"
	0xcf: bswap "rDI/r15"

	0xd8: [none] psubusb Pq, Qq
	0xd8: [0x66] psubusb Vdq, Wdq

	0xd9: [none] psubusw Pq, Qq
	0xd9: [0x66] psubusw Vdq, Wdq

	0xda: [none] pminub Pq, Qq
	0xda: [0x66] pminub Vdq, Wdq

	0xdb: [none] pand Pq, Qq
	0xdb: [0x66] pand Vdq, Wdq

	0xdc: [none] paddusb Pq, Qq
	0xdc: [0x66] paddusb Vdq, Wdq

	0xdd: [none] paddusw Pq, Qq
	0xdd: [0x66] paddusw Vdq, Wdq

	0xde: [none] pmaxub Pq, Qq
	0xde: [0x66] pmaxub Vdq, Wdq

	0xdf: [none] pandn Pq, Qq
	0xdf: [0x66] pandn Vdq, Wdq

	0xe8: [none] psubsb Pq, Qq
	0xe8: [0x66] psubsb Vdq, Wdq

	0xe9: [none] psubsw Pq, Qq
	0xe9: [0x66] psubsw Vdq, Wdq

	0xea: [none] pminsw Pq, Qq
	0xea: [0x66] pminsw Vdq, Wdq

	0xeb: [none] por Pq, Qq
	0xeb: [0x66] por Vdq, Wdq

	0xec: [none] paddsb Pq, Qq
	0xec: [0x66] paddsb Vdq, Wdq

	0xed: [none] paddsw Pq, Qq
	0xed: [0x66] paddsw Vdq, Wdq

	0xee: [none] pmaxsw Pq, Qq
	0xee: [0x66] pmaxsw Vdq, Wdq

	0xef: [none] pxor Pq, Qq
	0xef: [0x66] pxor Vdq, Wdq

	0xf8: [none] psubb Pq, Qq
	0xf8: [0x66] psubb Vdq, Wdq

	0xf9: [none] psubw Pq, Qq
	0xf9: [0x66] psubw Vdq, Wdq

	0xfa: [none] psubd Pq, Qq
	0xfa: [0x66] psubd Vdq, Wdq

	0xfb: [none] psubq Pq, Qq
	0xfb: [0x66] psubq Vdq, Wdq

	0xfc: [none] paddb Pq, Qq
	0xfc: [0x66] paddb Vdq, Wdq

	0xfd: [none] paddw Pq, Qq
	0xfd: [0x66] paddw Vdq, Wdq

	0xfe: [none] paddd Pq, Qq
	0xfe: [0x66] paddd Vdq, Wdq
}

table threebytes_0f38 {
	0x00: [none] pshufb Pq, Qq
	0x00: [0x66] pshufb Vdq, Wdq

	0x01: [none] phaddw Pq, Qq
	0x01: [0x66] phaddw Vdq, Wdq

	0x02: [none] phaddd Pq, Qq
	0x02: [0x66] phaddd Vdq, Wdq

	0x03: [none] phaddsw Pq, Qq
	0x03: [0x66] phaddsw Vdq, Wdq

	0x04: [none] pmaddubsw Pq, Qq
	0x04: [0x66] pmaddubsw Vdq, Wdq

	0x05: [none] phsubw Pq, Qq
	0x05: [0x66] phsubw Vdq, Wdq

	0x06: [none] phsubd Pq, Qq
	0x06: [0x66] phsubd Vdq, Wdq

	0x07: [none] phsubsw Pq, Qq
	0x07: [0x66] phsubsw Vdq, Wdq

	0x10: [0x66] pblendvb Vdq, Wdq
	0x14: [0x66] blendvps Vdq, Wdq
	0x15: [0x66] blendvpd Vdq, Wdq
	0x17: [0x66] ptest Vdq, Wdq

	0x20: [0x66] pmovsxbw Vdq, Wq
	0x21: [0x66] pmovsxbd Vdq, Wq
	0x22: [0x66] pmovsxbq Vdq, Wq
	0x23: [0x66] pmovsxwd Vdq, Wq
	0x24: [0x66] pmovsxwq Vdq, Wq
	0x25: [0x66] pmovsxdq Vdq, Wq

	0x30: [0x66] pmovsxbw Vdq, Wq
	0x31: [0x66] pmovsxbd Vdq, Wq
	0x32: [0x66] pmovsxbq Vdq, Wq
	0x33: [0x66] pmovsxwd Vdq, Wq
	0x34: [0x66] pmovsxwq Vdq, Wq
	0x35: [0x66] pmovsxdq Vdq, Wq
	0x37: [0x66] pcmpgtq Vdq, Wdq

	0x40: [0x66] pmulld Vdq, Wdq
	0x41: [0x66] phminposuw Vdq, Wdq

	0x80: [0x66] nvept Gq, Mdq
	0x81: [0x66] nvvpid Gq, Mdq

	0xf0: [none] movbe Gv, Mv
	0xf0: [0xf2] crc32b Gd, Eb

	0xf1: [none] movbe Mv, Gv
	0xf1: [0xf2] crc23l Gd, Ev

	0x08: [none] psignb Pq, Qq
	0x08: [0x66] psignb Vdq, Wdq

	0x09: [none] psignw Pq, Qq
	0x09: [0x66] psignw Vdq, Wdq

	0x0a: [none] psignd Pq, Qq
	0x0a: [0x66] psignd Vdq, Wdq

	0x0b: [none] pmulhrsw Pq, Qq
	0x0b: [0x66] pmulhrsw Vdq, Wdq

	0x1c: [none] pabsb Pq, Qq
	0x1c: [0x66] pabsb Vdq, Wdq

	0x1d: [none] pabsw Pq, Qq
	0x1d: [0x66] pabsw Vdq, Wdq

	0x1e: [none] pabsd Pq, Qq
	0x1e: [0x66] pabsd Vdq, Wdq

	0x28: [0x66] pmuldq Vdq, Wdq
	0x29: [0x66] pcmpeqq Vdq, Wdq
	0x2a: [0x66] movntdqa Vdq, Mdq
	0x2b: [0x66] packusdw Vdq, Wdq

	0x38: [0x66] pminsb Vdq, Wdq
	0x39: [0x66] pminsd Vdq, Wdq
	0x3a: [0x66] pminuw Vdq, Wdq
	0x3b: [0x66] pminud Vdq, Wdq
	0x3c: [0x66] pmaxsb Vdq, Wdq
	0x3d: [0x66] pmaxsd Vdq, Wdq
	0x3e: [0x66] pmaxuw Vdq, Wdq
	0x3f: [0x66] pmaxud Vdq, Wdq
}

table threebytes_0f3a {
	0x14: [0x66] pextrb Eb, Vdq, Ib
	0x15: [0x66] pextrw Ew, Vdq, Ib
	0x16: [0x66] pextrq Eq, Vdq, Ib
	0x17: [0x66] extractps Ed, Vdq, Ib

	0x20: [0x66] pinsrb Vdq, Rq, Ib
	0x21: [0x66] insertps Vdq, Ed, Ib
	0x22: [0x66] pinsrq Vdq, Eq, Ib

	0x40: [0x66] dpps Vdq, Wdq, Ib
	0x41: [0x66] dppd Vdq, Wdq, Ib
	0x42: [0x66] mpsadbw Vdq, Wdq, Ib

	0x60: [0x66] pcmpestrm Vdq, Wdq, Ib
	0x61: [0x66] pcmpestri Vdq, Wdq, Ib
	0x62: [0x66] pcmpistrm Vdq, Wdq, Ib
	0x63: [0x66] pcmpistri Vdq, Wdq, Ib

	0x08: [0x66] roundps Vdq, Wdq, Ib
	0x09: [0x66] roundpd Vdq, Wdq, Ib
	0x0a: [0x66] roundss Vss, Wss, Ib
	0x0b: [0x66] roundsd Vsd, Wsd, Ib
	0x0c: [0x66] blendps Vdq, Wdq, Ib
	0x0d: [0x66] blendpd Vdq, Wdq, Ib
	0x0e: [0x66] pblendw Vdq, Wdq, Ib
	0x0f: [none] palignr Pq, Qq, Ib
	0x0f: [0x66] palignr Vdq, Wdq, Ib
}



table GRP8_0x0fba {
	0x04: bt Ev, Ib
	0x05: bts Ev, Ib
	0x06: btr Ev, Ib
	0x07: btc Ev, Ib
}

table GRP15_0x0fae_mem {
	0x00: fxsave  Ev
	0x01: fxrstor Ev
	0x02: ldmxcsr Ev
	0x03: stmxcsr Ev
	0x04: xsave   Ev
	0x05: xrstor  Ev
	0x07: clflush Ev
}

table GRP15_0x0fae_11b {
	0x05: lfence
	0x06: mfence
	0x07: sfence
}

table GRP9_0x0fc7 {
	0x01: cmpxchg8b Mq
	0x06: [none] vmptrld Mq
	0x06: [0x66] vmclear Mq
	0x06: [0xf3] vmxon Mq
	0x07: vmptrst Mq
}

table GRP1_0x80 {
	0x00: add Eb, Ib
	0x01: or  Eb, Ib
	0x02: adc Eb, Ib
	0x03: sbb Eb, Ib
	0x04: and Eb, Ib
	0x05: sub Eb, Ib
	0x06: xor Eb, Ib
	0x07: cmp Eb, Ib
}

table GRP1_0x81 {
	0x00: add Ev, Iz
	0x01: or  Ev, Iz
	0x02: adc Ev, Iz
	0x03: sbb Ev, Iz
	0x04: and Ev, Iz
	0x05: sub Ev, Iz
	0x06: xor Ev, Iz
	0x07: cmp Ev, Iz
}

table GRP1_0x82 {
	0x00: add Eb, Ib | i64
	0x01: or  Eb, Ib | i64
	0x02: adc Eb, Ib | i64
	0x03: sbb Eb, Ib | i64
	0x04: and Eb, Ib | i64
	0x05: sub Eb, Ib | i64
	0x06: xor Eb, Ib | i64
	0x07: cmp Eb, Ib | i64
}

table GRP1_0x83 {
	0x00: add Ev, Ib
	0x01: or  Ev, Ib
	0x02: adc Ev, Ib
	0x03: sbb Ev, Ib
	0x04: and Ev, Ib
	0x05: sub Ev, Ib
	0x06: xor Ev, Ib
	0x07: cmp Ev, Ib
}

table GRP1A_0x8f {
	0x00: pop Ev
}

table GRP2_0xc0 {
	0x00: rol Eb, Ib | 1A
	0x01: ror Eb, Ib | 1A
	0x02: rcl Eb, Ib | 1A
	0x03: rcr Eb, Ib | 1A
	0x04: shl Eb, Ib | 1A
	0x05: shr Eb, Ib | 1A
	0x07: sar Eb, Ib | 1A
}

table GRP2_0xc1 {
	0x00: rol Ev, Ib | 1A
	0x01: ror Ev, Ib | 1A
	0x02: rcl Ev, Ib | 1A
	0x03: rcr Ev, Ib | 1A
	0x04: shl Ev, Ib | 1A
	0x05: shr Ev, Ib | 1A
	0x07: sar Ev, Ib | 1A
}

table GRP2_0xd0 {
	0x00: rol Eb, '1' | 1A
	0x01: ror Eb, '1' | 1A
	0x02: rcl Eb, '1' | 1A
	0x03: rcr Eb, '1' | 1A
	0x04: shl Eb, '1' | 1A
	0x05: shr Eb, '1' | 1A
	0x07: sar Eb, '1' | 1A
}


table GRP2_0xd1 {
	0x00: rol Ev, '1' | 1A
	0x01: ror Ev, '1' | 1A
	0x02: rcl Ev, '1' | 1A
	0x03: rcr Ev, '1' | 1A
	0x04: shl Ev, '1' | 1A
	0x05: shr Ev, '1' | 1A
	0x07: sar Ev, '1' | 1A
}

table GRP2_0xd2 {
	0x00: rol Eb, "CL" | 1A
	0x01: ror Eb, "CL" | 1A
	0x02: rcl Eb, "CL" | 1A
	0x03: rcr Eb, "CL" | 1A
	0x04: shl Eb, "CL" | 1A
	0x05: shr Eb, "CL" | 1A
	0x07: sar Eb, "CL" | 1A
}

table GRP2_0xd3 {
	0x00: rol Ev, "CL" | 1A
	0x01: ror Ev, "CL" | 1A
	0x02: rcl Ev, "CL" | 1A
	0x03: rcr Ev, "CL" | 1A
	0x04: shl Ev, "CL" | 1A
	0x05: shr Ev, "CL" | 1A
	0x07: sar Ev, "CL" | 1A
}


table GRP11_0xc6 {
	0x00: mov Eb, Ib | 1A
}

table GRP11_0xc7 {
	0x00: mov Ev, Iz | 1A
}


table GRP3_0xf6 {
	0x00: test Eb, Ib | 1A
	0x02: not Eb | 1A
	0x03: neg Eb | 1A
	0x04: mul Eb, "AL" | 1A
	0x05: imul Eb, "AL" | 1A
	0x06: div Eb, "AL" | 1A
	0x07: idiv Eb, "AL" | 1A
}

table GRP3_0xf7 {
	0x00: test Ev, Iz | 1A
	0x02: not Ev | 1A
	0x03: neg Ev | 1A
	0x04: mul Ev, "rAX" | 1A
	0x05: imul Ev, "rAX" | 1A
	0x06: div Ev, "rAX" | 1A
	0x07: idiv Ev, "rAX" | 1A
}

table GRP4_0xfe {
	0x00: inc Eb | 1A
	0x01: dec Eb | 1A
}

table GRP5_0xff {
	0x00: inc Ev | 1A
	0x01: dec Ev | 1A
	0x02: calln Ev | 1A, f64 !
	0x03: callf Ep | 1A !
	0x04: jmpn Ev | 1A !
	0x05: jmpf Ep | 1A !
	0x06: push Ev | 1A, d64
}

table GRP6_0x0f00 {
	0x00: sldt Ew
	0x01: str Ew
	0x02: lldt Ew
	0x03: ltr Ew
	0x04: verr Ew
	0x05: verw Ew
}

table GRP7_0x0f01_mem {
	0x00: sgdt Ms
	0x01: sidt Ms
	0x02: lgdt Ms
	0x03: lidt Ms
	0x04: smsw Ev
	0x06: lmsw Ew
	0x07: invlpg Mb
}

table GRP7_0x0f01_11b {
	0x00: vmxxx
	0x01: monitorormwait
	0x02: xgetorsetbv
	0x07: swapgs | o64
}

table GRP12_0x0f71 {
	0x02: [none] psrlw Nq, Ib
	0x02: [0x66] psrlw Udq, Ib

	0x04: [none] psraw Nq, Ib
	0x04: [0x66] psraw Udq, Ib

	0x06: [none] psllw Nq, Ib
	0x06: [0x66] psllw Udq, Ib

}

table GRP13_0x0f72 {
	0x02: [none] psrld Nq, Ib
	0x02: [0x66] psrld Udq, Ib

	0x04: [none] psrad Nq, Ib
	0x04: [0x66] psrad Udq, Ib

	0x06: [none] pslld Nq, Ib
	0x06: [0x66] pslld Udq, Ib
}

table GRP14_0x0f73 {
	0x02: [none] psrlq Nq, Ib
	0x02: [0x66] psrlq Udq, Ib

	0x03: [0x66] psrldq Udq, Ib

	0x06: [none] psllq Nq, Ib
	0x06: [0x66] psllq Udq, Ib

	0x07: [0x66] pslldq Udq, Ib
}

table GRP16_0x0f18 {
	0x00-0x03: prefetch Mb
}


# vim:ts=4:sw=4

